
FinalProjectCode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000062  00800200  000014ce  00001562  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000014ce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000028  00800262  00800262  000015c4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000015c4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000015f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  00001634  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000027b5  00000000  00000000  00001784  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001114  00000000  00000000  00003f39  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000fea  00000000  00000000  0000504d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004dc  00000000  00000000  00006038  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000984  00000000  00000000  00006514  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000187d  00000000  00000000  00006e98  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000138  00000000  00000000  00008715  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	8f c0       	rjmp	.+286    	; 0x124 <__bad_interrupt>
       6:	00 00       	nop
       8:	78 c6       	rjmp	.+3312   	; 0xcfa <__vector_2>
       a:	00 00       	nop
       c:	90 c6       	rjmp	.+3360   	; 0xd2e <__vector_3>
       e:	00 00       	nop
      10:	c5 c6       	rjmp	.+3466   	; 0xd9c <__vector_4>
      12:	00 00       	nop
      14:	02 c7       	rjmp	.+3588   	; 0xe1a <__vector_5>
      16:	00 00       	nop
      18:	67 c7       	rjmp	.+3790   	; 0xee8 <__vector_6>
      1a:	00 00       	nop
      1c:	83 c0       	rjmp	.+262    	; 0x124 <__bad_interrupt>
      1e:	00 00       	nop
      20:	81 c0       	rjmp	.+258    	; 0x124 <__bad_interrupt>
      22:	00 00       	nop
      24:	7f c0       	rjmp	.+254    	; 0x124 <__bad_interrupt>
      26:	00 00       	nop
      28:	7d c0       	rjmp	.+250    	; 0x124 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7b c0       	rjmp	.+246    	; 0x124 <__bad_interrupt>
      2e:	00 00       	nop
      30:	79 c0       	rjmp	.+242    	; 0x124 <__bad_interrupt>
      32:	00 00       	nop
      34:	77 c0       	rjmp	.+238    	; 0x124 <__bad_interrupt>
      36:	00 00       	nop
      38:	75 c0       	rjmp	.+234    	; 0x124 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	73 c0       	rjmp	.+230    	; 0x124 <__bad_interrupt>
      3e:	00 00       	nop
      40:	71 c0       	rjmp	.+226    	; 0x124 <__bad_interrupt>
      42:	00 00       	nop
      44:	6f c0       	rjmp	.+222    	; 0x124 <__bad_interrupt>
      46:	00 00       	nop
      48:	6d c0       	rjmp	.+218    	; 0x124 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6b c0       	rjmp	.+214    	; 0x124 <__bad_interrupt>
      4e:	00 00       	nop
      50:	69 c0       	rjmp	.+210    	; 0x124 <__bad_interrupt>
      52:	00 00       	nop
      54:	67 c0       	rjmp	.+206    	; 0x124 <__bad_interrupt>
      56:	00 00       	nop
      58:	65 c0       	rjmp	.+202    	; 0x124 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	63 c0       	rjmp	.+198    	; 0x124 <__bad_interrupt>
      5e:	00 00       	nop
      60:	61 c0       	rjmp	.+194    	; 0x124 <__bad_interrupt>
      62:	00 00       	nop
      64:	5f c0       	rjmp	.+190    	; 0x124 <__bad_interrupt>
      66:	00 00       	nop
      68:	5d c0       	rjmp	.+186    	; 0x124 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5b c0       	rjmp	.+182    	; 0x124 <__bad_interrupt>
      6e:	00 00       	nop
      70:	59 c0       	rjmp	.+178    	; 0x124 <__bad_interrupt>
      72:	00 00       	nop
      74:	88 c7       	rjmp	.+3856   	; 0xf86 <__vector_29>
      76:	00 00       	nop
      78:	55 c0       	rjmp	.+170    	; 0x124 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	53 c0       	rjmp	.+166    	; 0x124 <__bad_interrupt>
      7e:	00 00       	nop
      80:	51 c0       	rjmp	.+162    	; 0x124 <__bad_interrupt>
      82:	00 00       	nop
      84:	4f c0       	rjmp	.+158    	; 0x124 <__bad_interrupt>
      86:	00 00       	nop
      88:	4d c0       	rjmp	.+154    	; 0x124 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	47 c7       	rjmp	.+3726   	; 0xf1c <__vector_35>
      8e:	00 00       	nop
      90:	49 c0       	rjmp	.+146    	; 0x124 <__bad_interrupt>
      92:	00 00       	nop
      94:	47 c0       	rjmp	.+142    	; 0x124 <__bad_interrupt>
      96:	00 00       	nop
      98:	45 c0       	rjmp	.+138    	; 0x124 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	43 c0       	rjmp	.+134    	; 0x124 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	41 c0       	rjmp	.+130    	; 0x124 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3f c0       	rjmp	.+126    	; 0x124 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3d c0       	rjmp	.+122    	; 0x124 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3b c0       	rjmp	.+118    	; 0x124 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	39 c0       	rjmp	.+114    	; 0x124 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	37 c0       	rjmp	.+110    	; 0x124 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	35 c0       	rjmp	.+106    	; 0x124 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	33 c0       	rjmp	.+102    	; 0x124 <__bad_interrupt>
      be:	00 00       	nop
      c0:	31 c0       	rjmp	.+98     	; 0x124 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2f c0       	rjmp	.+94     	; 0x124 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2d c0       	rjmp	.+90     	; 0x124 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2b c0       	rjmp	.+86     	; 0x124 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	29 c0       	rjmp	.+82     	; 0x124 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	27 c0       	rjmp	.+78     	; 0x124 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	25 c0       	rjmp	.+74     	; 0x124 <__bad_interrupt>
      da:	00 00       	nop
      dc:	23 c0       	rjmp	.+70     	; 0x124 <__bad_interrupt>
      de:	00 00       	nop
      e0:	21 c0       	rjmp	.+66     	; 0x124 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	ee ec       	ldi	r30, 0xCE	; 206
      fc:	f4 e1       	ldi	r31, 0x14	; 20
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a2 36       	cpi	r26, 0x62	; 98
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	22 e0       	ldi	r18, 0x02	; 2
     110:	a2 e6       	ldi	r26, 0x62	; 98
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	aa 38       	cpi	r26, 0x8A	; 138
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	19 d4       	rcall	.+2098   	; 0x952 <main>
     120:	0c 94 65 0a 	jmp	0x14ca	; 0x14ca <_exit>

00000124 <__bad_interrupt>:
     124:	26 c7       	rjmp	.+3660   	; 0xf72 <__vector_default>

00000126 <LCDBusyLoop>:
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=0xF0;
     126:	87 b1       	in	r24, 0x07	; 7
     128:	80 7f       	andi	r24, 0xF0	; 240
     12a:	87 b9       	out	0x07, r24	; 7

	//change LCD mode
	SET_RW();		//Read mode
     12c:	45 9a       	sbi	0x08, 5	; 8
	CLEAR_RS();		//Read status
     12e:	46 98       	cbi	0x08, 6	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     130:	82 e0       	ldi	r24, 0x02	; 2
     132:	8a 95       	dec	r24
     134:	f1 f7       	brne	.-4      	; 0x132 <LCDBusyLoop+0xc>
     136:	00 c0       	rjmp	.+0      	; 0x138 <LCDBusyLoop+0x12>
	_delay_us(0.5);		//tAS
	
	do
	{

		SET_E();
     138:	47 9a       	sbi	0x08, 7	; 8
     13a:	92 e0       	ldi	r25, 0x02	; 2
     13c:	9a 95       	dec	r25
     13e:	f1 f7       	brne	.-4      	; 0x13c <LCDBusyLoop+0x16>
     140:	00 c0       	rjmp	.+0      	; 0x142 <LCDBusyLoop+0x1c>

		//Wait tDA for data to become available
		_delay_us(0.5);
		
		status=LCD_DATA_PIN;
     142:	86 b1       	in	r24, 0x06	; 6
		status=status<<4;
     144:	82 95       	swap	r24
     146:	80 7f       	andi	r24, 0xF0	; 240
     148:	92 e0       	ldi	r25, 0x02	; 2
     14a:	9a 95       	dec	r25
     14c:	f1 f7       	brne	.-4      	; 0x14a <LCDBusyLoop+0x24>
     14e:	00 c0       	rjmp	.+0      	; 0x150 <LCDBusyLoop+0x2a>

		_delay_us(0.5);
		
		//Pull E low
		CLEAR_E();
     150:	47 98       	cbi	0x08, 7	; 8
     152:	95 e0       	ldi	r25, 0x05	; 5
     154:	9a 95       	dec	r25
     156:	f1 f7       	brne	.-4      	; 0x154 <LCDBusyLoop+0x2e>
     158:	00 00       	nop
		_delay_us(1);	//tEL
		
		SET_E();
     15a:	47 9a       	sbi	0x08, 7	; 8
     15c:	92 e0       	ldi	r25, 0x02	; 2
     15e:	9a 95       	dec	r25
     160:	f1 f7       	brne	.-4      	; 0x15e <LCDBusyLoop+0x38>
     162:	00 c0       	rjmp	.+0      	; 0x164 <LCDBusyLoop+0x3e>
		_delay_us(0.5);
		
		temp=LCD_DATA_PIN;
     164:	96 b1       	in	r25, 0x06	; 6
     166:	92 e0       	ldi	r25, 0x02	; 2
     168:	9a 95       	dec	r25
     16a:	f1 f7       	brne	.-4      	; 0x168 <LCDBusyLoop+0x42>
     16c:	00 c0       	rjmp	.+0      	; 0x16e <LCDBusyLoop+0x48>

		busy=status & 0b10000000;

		_delay_us(0.5);
		
		CLEAR_E();
     16e:	47 98       	cbi	0x08, 7	; 8
     170:	95 e0       	ldi	r25, 0x05	; 5
     172:	9a 95       	dec	r25
     174:	f1 f7       	brne	.-4      	; 0x172 <LCDBusyLoop+0x4c>
     176:	00 00       	nop
		_delay_us(1);	//tEL
		
	}while(busy);
     178:	88 23       	and	r24, r24
     17a:	f4 f2       	brlt	.-68     	; 0x138 <LCDBusyLoop+0x12>

	CLEAR_RW();		//write mode
     17c:	45 98       	cbi	0x08, 5	; 8
	//Change Port to output
	LCD_DATA_DDR|=0x0F;
     17e:	87 b1       	in	r24, 0x07	; 7
     180:	8f 60       	ori	r24, 0x0F	; 15
     182:	87 b9       	out	0x07, r24	; 7
     184:	08 95       	ret

00000186 <LCDByte>:
//NOTE: THIS FUNCTION RETURS ONLY WHEN LCD HAS PROCESSED THE COMMAND

uint8_t hn,ln;			//Nibbles
uint8_t temp;

hn=c>>4;
     186:	28 2f       	mov	r18, r24
     188:	22 95       	swap	r18
     18a:	2f 70       	andi	r18, 0x0F	; 15
ln=(c & 0x0F);
     18c:	8f 70       	andi	r24, 0x0F	; 15

if(isdata==0)
     18e:	61 11       	cpse	r22, r1
     190:	02 c0       	rjmp	.+4      	; 0x196 <LCDByte+0x10>
	CLEAR_RS();
     192:	46 98       	cbi	0x08, 6	; 8
     194:	01 c0       	rjmp	.+2      	; 0x198 <LCDByte+0x12>
else
	SET_RS();
     196:	46 9a       	sbi	0x08, 6	; 8
     198:	92 e0       	ldi	r25, 0x02	; 2
     19a:	9a 95       	dec	r25
     19c:	f1 f7       	brne	.-4      	; 0x19a <LCDByte+0x14>
     19e:	00 c0       	rjmp	.+0      	; 0x1a0 <LCDByte+0x1a>

_delay_us(0.500);		//tAS


SET_E();
     1a0:	47 9a       	sbi	0x08, 7	; 8

//Send high nibble

temp=(LCD_DATA_PORT & 0XF0)|(hn);
     1a2:	98 b1       	in	r25, 0x08	; 8
     1a4:	90 7f       	andi	r25, 0xF0	; 240
     1a6:	92 2b       	or	r25, r18
LCD_DATA_PORT=temp;
     1a8:	98 b9       	out	0x08, r25	; 8
     1aa:	95 e0       	ldi	r25, 0x05	; 5
     1ac:	9a 95       	dec	r25
     1ae:	f1 f7       	brne	.-4      	; 0x1ac <LCDByte+0x26>
     1b0:	00 00       	nop
_delay_us(1);			//tEH


//Now data lines are stable pull E low for transmission

CLEAR_E();
     1b2:	47 98       	cbi	0x08, 7	; 8
     1b4:	95 e0       	ldi	r25, 0x05	; 5
     1b6:	9a 95       	dec	r25
     1b8:	f1 f7       	brne	.-4      	; 0x1b6 <LCDByte+0x30>
     1ba:	00 00       	nop

_delay_us(1);

//Send the lower nibble
SET_E();
     1bc:	47 9a       	sbi	0x08, 7	; 8

temp=(LCD_DATA_PORT & 0XF0)|(ln);
     1be:	98 b1       	in	r25, 0x08	; 8
     1c0:	90 7f       	andi	r25, 0xF0	; 240
     1c2:	89 2b       	or	r24, r25

LCD_DATA_PORT=temp;
     1c4:	88 b9       	out	0x08, r24	; 8
     1c6:	85 e0       	ldi	r24, 0x05	; 5
     1c8:	8a 95       	dec	r24
     1ca:	f1 f7       	brne	.-4      	; 0x1c8 <LCDByte+0x42>
     1cc:	00 00       	nop
_delay_us(1);			//tEH
						//Do not wait too long, 1 us is good

//SEND

CLEAR_E();
     1ce:	47 98       	cbi	0x08, 7	; 8
     1d0:	95 e0       	ldi	r25, 0x05	; 5
     1d2:	9a 95       	dec	r25
     1d4:	f1 f7       	brne	.-4      	; 0x1d2 <LCDByte+0x4c>
     1d6:	00 00       	nop

_delay_us(1);			//tEL

LCDBusyLoop();
     1d8:	a6 cf       	rjmp	.-180    	; 0x126 <LCDBusyLoop>
     1da:	08 95       	ret

000001dc <InitLCD>:
	LCD_DATA_DDR|=0x0F;

}

void InitLCD(uint8_t style)
{
     1dc:	cf 93       	push	r28
     1de:	c8 2f       	mov	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1e0:	2f ef       	ldi	r18, 0xFF	; 255
     1e2:	86 e7       	ldi	r24, 0x76	; 118
     1e4:	91 e0       	ldi	r25, 0x01	; 1
     1e6:	21 50       	subi	r18, 0x01	; 1
     1e8:	80 40       	sbci	r24, 0x00	; 0
     1ea:	90 40       	sbci	r25, 0x00	; 0
     1ec:	e1 f7       	brne	.-8      	; 0x1e6 <InitLCD+0xa>
     1ee:	00 c0       	rjmp	.+0      	; 0x1f0 <InitLCD+0x14>
     1f0:	00 00       	nop
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
		
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F);
     1f2:	87 b1       	in	r24, 0x07	; 7
     1f4:	8f 60       	ori	r24, 0x0F	; 15
     1f6:	87 b9       	out	0x07, r24	; 7
	LCD_E_DDR|=(1<<LCD_E_POS);
     1f8:	3f 9a       	sbi	0x07, 7	; 7
	LCD_RS_DDR|=(1<<LCD_RS_POS);
     1fa:	3e 9a       	sbi	0x07, 6	; 7
	LCD_RW_DDR|=(1<<LCD_RW_POS);
     1fc:	3d 9a       	sbi	0x07, 5	; 7

	LCD_DATA_PORT&=0XF0;
     1fe:	88 b1       	in	r24, 0x08	; 8
     200:	80 7f       	andi	r24, 0xF0	; 240
     202:	88 b9       	out	0x08, r24	; 8
	CLEAR_E();
     204:	47 98       	cbi	0x08, 7	; 8
	CLEAR_RW();
     206:	45 98       	cbi	0x08, 5	; 8
	CLEAR_RS();
     208:	46 98       	cbi	0x08, 6	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     20a:	00 c0       	rjmp	.+0      	; 0x20c <InitLCD+0x30>
     20c:	00 c0       	rjmp	.+0      	; 0x20e <InitLCD+0x32>
     20e:	00 00       	nop

	//Set 4-bit mode
	_delay_us(0.3);	//tAS
	
	SET_E();
     210:	47 9a       	sbi	0x08, 7	; 8
	LCD_DATA_PORT|=(0b00000010); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
     212:	41 9a       	sbi	0x08, 1	; 8
     214:	25 e0       	ldi	r18, 0x05	; 5
     216:	2a 95       	dec	r18
     218:	f1 f7       	brne	.-4      	; 0x216 <InitLCD+0x3a>
     21a:	00 00       	nop
	_delay_us(1);
	
	CLEAR_E();
     21c:	47 98       	cbi	0x08, 7	; 8
     21e:	85 e0       	ldi	r24, 0x05	; 5
     220:	8a 95       	dec	r24
     222:	f1 f7       	brne	.-4      	; 0x220 <InitLCD+0x44>
     224:	00 00       	nop
	_delay_us(1);
		
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
     226:	7f df       	rcall	.-258    	; 0x126 <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
     228:	60 e0       	ldi	r22, 0x00	; 0
     22a:	8c 2f       	mov	r24, r28
     22c:	8c 60       	ori	r24, 0x0C	; 12
     22e:	ab df       	rcall	.-170    	; 0x186 <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
     230:	60 e0       	ldi	r22, 0x00	; 0
     232:	88 e2       	ldi	r24, 0x28	; 40
     234:	a8 df       	rcall	.-176    	; 0x186 <LCDByte>
}
     236:	cf 91       	pop	r28
     238:	08 95       	ret

0000023a <LCDWriteString>:
void LCDWriteString(const char *msg)
{
     23a:	cf 93       	push	r28
     23c:	df 93       	push	r29
     23e:	ec 01       	movw	r28, r24
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
     240:	88 81       	ld	r24, Y
     242:	88 23       	and	r24, r24
     244:	31 f0       	breq	.+12     	; 0x252 <LCDWriteString+0x18>
     246:	21 96       	adiw	r28, 0x01	; 1
 {
	LCDData(*msg);
     248:	61 e0       	ldi	r22, 0x01	; 1
     24a:	9d df       	rcall	.-198    	; 0x186 <LCDByte>
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
     24c:	89 91       	ld	r24, Y+
     24e:	81 11       	cpse	r24, r1
     250:	fb cf       	rjmp	.-10     	; 0x248 <LCDWriteString+0xe>
 {
	LCDData(*msg);
	msg++;
 }
}
     252:	df 91       	pop	r29
     254:	cf 91       	pop	r28
     256:	08 95       	ret

00000258 <LCDWriteInt>:

void LCDWriteInt(int val,unsigned int field_length)
{
     258:	ef 92       	push	r14
     25a:	ff 92       	push	r15
     25c:	0f 93       	push	r16
     25e:	1f 93       	push	r17
     260:	cf 93       	push	r28
     262:	df 93       	push	r29
     264:	00 d0       	rcall	.+0      	; 0x266 <LCDWriteInt+0xe>
     266:	1f 92       	push	r1
     268:	1f 92       	push	r1
     26a:	cd b7       	in	r28, 0x3d	; 61
     26c:	de b7       	in	r29, 0x3e	; 62
     26e:	7b 01       	movw	r14, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
     270:	fe 01       	movw	r30, r28
     272:	31 96       	adiw	r30, 0x01	; 1
     274:	25 e0       	ldi	r18, 0x05	; 5
     276:	df 01       	movw	r26, r30
     278:	1d 92       	st	X+, r1
     27a:	2a 95       	dec	r18
     27c:	e9 f7       	brne	.-6      	; 0x278 <LCDWriteInt+0x20>
	int i=4,j=0;
	while(val)
     27e:	00 97       	sbiw	r24, 0x00	; 0
     280:	51 f0       	breq	.+20     	; 0x296 <LCDWriteInt+0x3e>
     282:	35 96       	adiw	r30, 0x05	; 5
	{
	str[i]=val%10;
     284:	2a e0       	ldi	r18, 0x0A	; 10
     286:	30 e0       	ldi	r19, 0x00	; 0
     288:	b9 01       	movw	r22, r18
     28a:	d7 d7       	rcall	.+4014   	; 0x123a <__divmodhi4>
     28c:	82 93       	st	-Z, r24
	val=val/10;
     28e:	86 2f       	mov	r24, r22
     290:	97 2f       	mov	r25, r23

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
     292:	00 97       	sbiw	r24, 0x00	; 0
     294:	c9 f7       	brne	.-14     	; 0x288 <LCDWriteInt+0x30>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
     296:	bf ef       	ldi	r27, 0xFF	; 255
     298:	eb 16       	cp	r14, r27
     29a:	fb 06       	cpc	r15, r27
     29c:	69 f4       	brne	.+26     	; 0x2b8 <LCDWriteInt+0x60>
		while(str[j]==0) j++;
     29e:	89 81       	ldd	r24, Y+1	; 0x01
     2a0:	81 11       	cpse	r24, r1
     2a2:	1d c0       	rjmp	.+58     	; 0x2de <LCDWriteInt+0x86>
     2a4:	fe 01       	movw	r30, r28
     2a6:	32 96       	adiw	r30, 0x02	; 2
     2a8:	00 e0       	ldi	r16, 0x00	; 0
     2aa:	10 e0       	ldi	r17, 0x00	; 0
     2ac:	0f 5f       	subi	r16, 0xFF	; 255
     2ae:	1f 4f       	sbci	r17, 0xFF	; 255
     2b0:	81 91       	ld	r24, Z+
     2b2:	88 23       	and	r24, r24
     2b4:	d9 f3       	breq	.-10     	; 0x2ac <LCDWriteInt+0x54>
     2b6:	0f c0       	rjmp	.+30     	; 0x2d6 <LCDWriteInt+0x7e>
	else
		j=5-field_length;
     2b8:	05 e0       	ldi	r16, 0x05	; 5
     2ba:	10 e0       	ldi	r17, 0x00	; 0
     2bc:	0e 19       	sub	r16, r14
     2be:	1f 09       	sbc	r17, r15
     2c0:	0a c0       	rjmp	.+20     	; 0x2d6 <LCDWriteInt+0x7e>

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
     2c2:	f8 01       	movw	r30, r16
     2c4:	81 91       	ld	r24, Z+
     2c6:	8f 01       	movw	r16, r30
     2c8:	61 e0       	ldi	r22, 0x01	; 1
     2ca:	80 5d       	subi	r24, 0xD0	; 208
     2cc:	5c df       	rcall	.-328    	; 0x186 <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
     2ce:	0e 15       	cp	r16, r14
     2d0:	1f 05       	cpc	r17, r15
     2d2:	b9 f7       	brne	.-18     	; 0x2c2 <LCDWriteInt+0x6a>
     2d4:	11 c0       	rjmp	.+34     	; 0x2f8 <LCDWriteInt+0xa0>
     2d6:	05 30       	cpi	r16, 0x05	; 5
     2d8:	11 05       	cpc	r17, r1
     2da:	1c f0       	brlt	.+6      	; 0x2e2 <LCDWriteInt+0x8a>
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <LCDWriteInt+0xa0>
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
		while(str[j]==0) j++;
     2de:	00 e0       	ldi	r16, 0x00	; 0
     2e0:	10 e0       	ldi	r17, 0x00	; 0
     2e2:	81 e0       	ldi	r24, 0x01	; 1
     2e4:	90 e0       	ldi	r25, 0x00	; 0
     2e6:	8c 0f       	add	r24, r28
     2e8:	9d 1f       	adc	r25, r29
     2ea:	08 0f       	add	r16, r24
     2ec:	19 1f       	adc	r17, r25
     2ee:	7e 01       	movw	r14, r28
     2f0:	96 e0       	ldi	r25, 0x06	; 6
     2f2:	e9 0e       	add	r14, r25
     2f4:	f1 1c       	adc	r15, r1
     2f6:	e5 cf       	rjmp	.-54     	; 0x2c2 <LCDWriteInt+0x6a>
	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
	}
}
     2f8:	0f 90       	pop	r0
     2fa:	0f 90       	pop	r0
     2fc:	0f 90       	pop	r0
     2fe:	0f 90       	pop	r0
     300:	0f 90       	pop	r0
     302:	df 91       	pop	r29
     304:	cf 91       	pop	r28
     306:	1f 91       	pop	r17
     308:	0f 91       	pop	r16
     30a:	ff 90       	pop	r15
     30c:	ef 90       	pop	r14
     30e:	08 95       	ret

00000310 <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 if(x<40)
     310:	88 32       	cpi	r24, 0x28	; 40
     312:	28 f4       	brcc	.+10     	; 0x31e <LCDGotoXY+0xe>
 {
  if(y) x|=0b01000000;
     314:	61 11       	cpse	r22, r1
     316:	80 64       	ori	r24, 0x40	; 64
  x|=0b10000000;
  LCDCmd(x);
     318:	60 e0       	ldi	r22, 0x00	; 0
     31a:	80 68       	ori	r24, 0x80	; 128
     31c:	34 cf       	rjmp	.-408    	; 0x186 <LCDByte>
     31e:	08 95       	ret

00000320 <setup>:
*/
/* Check to see if the queue is empty */
char isEmpty(link **h){
	/* ENTER YOUR CODE HERE */
	return(*h == NULL);
}/*isEmpty*/
     320:	fc 01       	movw	r30, r24
     322:	11 82       	std	Z+1, r1	; 0x01
     324:	10 82       	st	Z, r1
     326:	fb 01       	movw	r30, r22
     328:	11 82       	std	Z+1, r1	; 0x01
     32a:	10 82       	st	Z, r1
     32c:	08 95       	ret

0000032e <initLink>:
     32e:	cf 93       	push	r28
     330:	df 93       	push	r29
     332:	ec 01       	movw	r28, r24
     334:	84 e0       	ldi	r24, 0x04	; 4
     336:	90 e0       	ldi	r25, 0x00	; 0
     338:	a7 d7       	rcall	.+3918   	; 0x1288 <malloc>
     33a:	99 83       	std	Y+1, r25	; 0x01
     33c:	88 83       	st	Y, r24
     33e:	fc 01       	movw	r30, r24
     340:	13 82       	std	Z+3, r1	; 0x03
     342:	12 82       	std	Z+2, r1	; 0x02
     344:	df 91       	pop	r29
     346:	cf 91       	pop	r28
     348:	08 95       	ret

0000034a <enqueue>:
     34a:	db 01       	movw	r26, r22
     34c:	ed 91       	ld	r30, X+
     34e:	fc 91       	ld	r31, X
     350:	30 97       	sbiw	r30, 0x00	; 0
     352:	61 f0       	breq	.+24     	; 0x36c <enqueue+0x22>
     354:	da 01       	movw	r26, r20
     356:	8d 91       	ld	r24, X+
     358:	9c 91       	ld	r25, X
     35a:	11 97       	sbiw	r26, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	8d 91       	ld	r24, X+
     362:	9c 91       	ld	r25, X
     364:	fb 01       	movw	r30, r22
     366:	91 83       	std	Z+1, r25	; 0x01
     368:	80 83       	st	Z, r24
     36a:	08 95       	ret
     36c:	da 01       	movw	r26, r20
     36e:	2d 91       	ld	r18, X+
     370:	3c 91       	ld	r19, X
     372:	11 97       	sbiw	r26, 0x01	; 1
     374:	fc 01       	movw	r30, r24
     376:	31 83       	std	Z+1, r19	; 0x01
     378:	20 83       	st	Z, r18
     37a:	8d 91       	ld	r24, X+
     37c:	9c 91       	ld	r25, X
     37e:	db 01       	movw	r26, r22
     380:	8d 93       	st	X+, r24
     382:	9c 93       	st	X, r25
     384:	08 95       	ret

00000386 <dequeue>:
     386:	fc 01       	movw	r30, r24
     388:	80 81       	ld	r24, Z
     38a:	91 81       	ldd	r25, Z+1	; 0x01
     38c:	db 01       	movw	r26, r22
     38e:	8d 93       	st	X+, r24
     390:	9c 93       	st	X, r25
     392:	a0 81       	ld	r26, Z
     394:	b1 81       	ldd	r27, Z+1	; 0x01
     396:	10 97       	sbiw	r26, 0x00	; 0
     398:	31 f0       	breq	.+12     	; 0x3a6 <dequeue+0x20>
     39a:	12 96       	adiw	r26, 0x02	; 2
     39c:	8d 91       	ld	r24, X+
     39e:	9c 91       	ld	r25, X
     3a0:	13 97       	sbiw	r26, 0x03	; 3
     3a2:	91 83       	std	Z+1, r25	; 0x01
     3a4:	80 83       	st	Z, r24
     3a6:	08 95       	ret

000003a8 <clearQueue>:
     3a8:	0f 93       	push	r16
     3aa:	1f 93       	push	r17
     3ac:	cf 93       	push	r28
     3ae:	df 93       	push	r29
     3b0:	ec 01       	movw	r28, r24
     3b2:	8b 01       	movw	r16, r22
     3b4:	88 81       	ld	r24, Y
     3b6:	99 81       	ldd	r25, Y+1	; 0x01
     3b8:	00 97       	sbiw	r24, 0x00	; 0
     3ba:	51 f0       	breq	.+20     	; 0x3d0 <clearQueue+0x28>
     3bc:	fc 01       	movw	r30, r24
     3be:	22 81       	ldd	r18, Z+2	; 0x02
     3c0:	33 81       	ldd	r19, Z+3	; 0x03
     3c2:	39 83       	std	Y+1, r19	; 0x01
     3c4:	28 83       	st	Y, r18
     3c6:	f8 d7       	rcall	.+4080   	; 0x13b8 <free>
     3c8:	88 81       	ld	r24, Y
     3ca:	99 81       	ldd	r25, Y+1	; 0x01
     3cc:	00 97       	sbiw	r24, 0x00	; 0
     3ce:	b1 f7       	brne	.-20     	; 0x3bc <clearQueue+0x14>
     3d0:	f8 01       	movw	r30, r16
     3d2:	11 82       	std	Z+1, r1	; 0x01
     3d4:	10 82       	st	Z, r1
     3d6:	df 91       	pop	r29
     3d8:	cf 91       	pop	r28
     3da:	1f 91       	pop	r17
     3dc:	0f 91       	pop	r16
     3de:	08 95       	ret

000003e0 <size>:
	link 	*temp;			/* will store the link while traversing the queue */
	int 	numElements;

	numElements = 0;

	temp = *h;			/* point to the first item in the list */
     3e0:	dc 01       	movw	r26, r24
     3e2:	ed 91       	ld	r30, X+
     3e4:	fc 91       	ld	r31, X

	while(temp != NULL){
     3e6:	30 97       	sbiw	r30, 0x00	; 0
     3e8:	49 f0       	breq	.+18     	; 0x3fc <size+0x1c>
     3ea:	80 e0       	ldi	r24, 0x00	; 0
     3ec:	90 e0       	ldi	r25, 0x00	; 0
		numElements++;
     3ee:	01 96       	adiw	r24, 0x01	; 1
		temp = temp->next;
     3f0:	02 80       	ldd	r0, Z+2	; 0x02
     3f2:	f3 81       	ldd	r31, Z+3	; 0x03
     3f4:	e0 2d       	mov	r30, r0

	numElements = 0;

	temp = *h;			/* point to the first item in the list */

	while(temp != NULL){
     3f6:	30 97       	sbiw	r30, 0x00	; 0
     3f8:	d1 f7       	brne	.-12     	; 0x3ee <size+0xe>
     3fa:	08 95       	ret
int size(link **h, link **t){

	link 	*temp;			/* will store the link while traversing the queue */
	int 	numElements;

	numElements = 0;
     3fc:	80 e0       	ldi	r24, 0x00	; 0
     3fe:	90 e0       	ldi	r25, 0x00	; 0
		numElements++;
		temp = temp->next;
	}/*while*/
	
	return(numElements);
}/*size*/
     400:	08 95       	ret

00000402 <mTimer>:

/*********************************Functions:*************************************/
/********************************************************************************/

//Timer function for miliseconds
void mTimer(int count){
     402:	ac 01       	movw	r20, r24
	int i;  // keeps track of loop number
	i=0;  // initializes loop counter2333

	//set the waveform generator mode bit description to clear timer on compare math mode (ctc) only
	TCCR1B |= _BV(WGM12);
     404:	e1 e8       	ldi	r30, 0x81	; 129
     406:	f0 e0       	ldi	r31, 0x00	; 0
     408:	90 81       	ld	r25, Z
     40a:	98 60       	ori	r25, 0x08	; 8
     40c:	90 83       	st	Z, r25
	
	OCR1A = 0x03E8;
     40e:	88 ee       	ldi	r24, 0xE8	; 232
     410:	93 e0       	ldi	r25, 0x03	; 3
     412:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
     416:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
	
	TCNT1 = 0x0000;
     41a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
     41e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
	
	TIFR1 |= _BV(OCF1A);
     422:	b1 9a       	sbi	0x16, 1	; 22
/********************************************************************************/

//Timer function for miliseconds
void mTimer(int count){
	int i;  // keeps track of loop number
	i=0;  // initializes loop counter2333
     424:	20 e0       	ldi	r18, 0x00	; 0
     426:	30 e0       	ldi	r19, 0x00	; 0
	
	TCNT1 = 0x0000;
	
	TIFR1 |= _BV(OCF1A);
	
	while (i<count){
     428:	05 c0       	rjmp	.+10     	; 0x434 <mTimer+0x32>
		if((TIFR1 & 0x02) == 0x02){
     42a:	b1 9b       	sbis	0x16, 1	; 22
     42c:	fe cf       	rjmp	.-4      	; 0x42a <mTimer+0x28>
			
			TIFR1 |= _BV(OCF1A);
     42e:	b1 9a       	sbi	0x16, 1	; 22
			i++; //increment loop number
     430:	2f 5f       	subi	r18, 0xFF	; 255
     432:	3f 4f       	sbci	r19, 0xFF	; 255
	
	TCNT1 = 0x0000;
	
	TIFR1 |= _BV(OCF1A);
	
	while (i<count){
     434:	24 17       	cp	r18, r20
     436:	35 07       	cpc	r19, r21
     438:	1c f4       	brge	.+6      	; 0x440 <mTimer+0x3e>
		if((TIFR1 & 0x02) == 0x02){
     43a:	b1 9b       	sbis	0x16, 1	; 22
     43c:	f6 cf       	rjmp	.-20     	; 0x42a <mTimer+0x28>
     43e:	f7 cf       	rjmp	.-18     	; 0x42e <mTimer+0x2c>
     440:	08 95       	ret

00000442 <step>:
	} // end while
	return;
}

//Step tells motor to step a specific number of times at a set speed and direction
int step(int dir, int steps, int speed, int tabIndex){
     442:	af 92       	push	r10
     444:	bf 92       	push	r11
     446:	cf 92       	push	r12
     448:	df 92       	push	r13
     44a:	ef 92       	push	r14
     44c:	ff 92       	push	r15
     44e:	0f 93       	push	r16
     450:	1f 93       	push	r17
     452:	cf 93       	push	r28
     454:	df 93       	push	r29
     456:	7b 01       	movw	r14, r22
     458:	6a 01       	movw	r12, r20
     45a:	e9 01       	movw	r28, r18
	
	//Clockwise dir
	if(dir){
     45c:	89 2b       	or	r24, r25
     45e:	21 f4       	brne	.+8      	; 0x468 <step+0x26>
			}
		}
	}
	//CCW
	else{
		for(int i = 0; i<steps; i++){
     460:	16 16       	cp	r1, r22
     462:	17 06       	cpc	r1, r23
     464:	e4 f0       	brlt	.+56     	; 0x49e <step+0x5c>
     466:	39 c0       	rjmp	.+114    	; 0x4da <step+0x98>
//Step tells motor to step a specific number of times at a set speed and direction
int step(int dir, int steps, int speed, int tabIndex){
	
	//Clockwise dir
	if(dir){
		for(int i = 0; i<steps; i++){
     468:	16 16       	cp	r1, r22
     46a:	17 06       	cpc	r1, r23
     46c:	b4 f5       	brge	.+108    	; 0x4da <step+0x98>
     46e:	00 e0       	ldi	r16, 0x00	; 0
     470:	10 e0       	ldi	r17, 0x00	; 0
			PORTA = stepTable[tabIndex];
     472:	fe 01       	movw	r30, r28
     474:	ee 0f       	add	r30, r30
     476:	ff 1f       	adc	r31, r31
     478:	e7 5a       	subi	r30, 0xA7	; 167
     47a:	fd 4f       	sbci	r31, 0xFD	; 253
     47c:	80 81       	ld	r24, Z
     47e:	82 b9       	out	0x02, r24	; 2
			mTimer(speed);
     480:	c6 01       	movw	r24, r12
     482:	bf df       	rcall	.-130    	; 0x402 <mTimer>
			if(tabIndex < 3){
     484:	c3 30       	cpi	r28, 0x03	; 3
     486:	d1 05       	cpc	r29, r1
     488:	14 f4       	brge	.+4      	; 0x48e <step+0x4c>
				tabIndex++;
     48a:	21 96       	adiw	r28, 0x01	; 1
     48c:	02 c0       	rjmp	.+4      	; 0x492 <step+0x50>
			}
			else{
				tabIndex = 0;
     48e:	c0 e0       	ldi	r28, 0x00	; 0
     490:	d0 e0       	ldi	r29, 0x00	; 0
//Step tells motor to step a specific number of times at a set speed and direction
int step(int dir, int steps, int speed, int tabIndex){
	
	//Clockwise dir
	if(dir){
		for(int i = 0; i<steps; i++){
     492:	0f 5f       	subi	r16, 0xFF	; 255
     494:	1f 4f       	sbci	r17, 0xFF	; 255
     496:	e0 16       	cp	r14, r16
     498:	f1 06       	cpc	r15, r17
     49a:	59 f7       	brne	.-42     	; 0x472 <step+0x30>
     49c:	1e c0       	rjmp	.+60     	; 0x4da <step+0x98>
			}
		}
	}
	//CCW
	else{
		for(int i = 0; i<steps; i++){
     49e:	00 e0       	ldi	r16, 0x00	; 0
     4a0:	10 e0       	ldi	r17, 0x00	; 0
			PORTA = stepTable[(3-tabIndex)];
     4a2:	0f 2e       	mov	r0, r31
     4a4:	f3 e0       	ldi	r31, 0x03	; 3
     4a6:	af 2e       	mov	r10, r31
     4a8:	b1 2c       	mov	r11, r1
     4aa:	f0 2d       	mov	r31, r0
     4ac:	f5 01       	movw	r30, r10
     4ae:	ec 1b       	sub	r30, r28
     4b0:	fd 0b       	sbc	r31, r29
     4b2:	ee 0f       	add	r30, r30
     4b4:	ff 1f       	adc	r31, r31
     4b6:	e7 5a       	subi	r30, 0xA7	; 167
     4b8:	fd 4f       	sbci	r31, 0xFD	; 253
     4ba:	80 81       	ld	r24, Z
     4bc:	82 b9       	out	0x02, r24	; 2
			mTimer(speed);
     4be:	c6 01       	movw	r24, r12
     4c0:	a0 df       	rcall	.-192    	; 0x402 <mTimer>
			if(tabIndex < 3){
     4c2:	c3 30       	cpi	r28, 0x03	; 3
     4c4:	d1 05       	cpc	r29, r1
     4c6:	14 f4       	brge	.+4      	; 0x4cc <step+0x8a>
				tabIndex++;
     4c8:	21 96       	adiw	r28, 0x01	; 1
     4ca:	02 c0       	rjmp	.+4      	; 0x4d0 <step+0x8e>
			}
			else{
				tabIndex = 0;
     4cc:	c0 e0       	ldi	r28, 0x00	; 0
     4ce:	d0 e0       	ldi	r29, 0x00	; 0
			}
		}
	}
	//CCW
	else{
		for(int i = 0; i<steps; i++){
     4d0:	0f 5f       	subi	r16, 0xFF	; 255
     4d2:	1f 4f       	sbci	r17, 0xFF	; 255
     4d4:	e0 16       	cp	r14, r16
     4d6:	f1 06       	cpc	r15, r17
     4d8:	49 f7       	brne	.-46     	; 0x4ac <step+0x6a>
				tabIndex = 0;
			}
		}
	}
	return tabIndex;
}
     4da:	ce 01       	movw	r24, r28
     4dc:	df 91       	pop	r29
     4de:	cf 91       	pop	r28
     4e0:	1f 91       	pop	r17
     4e2:	0f 91       	pop	r16
     4e4:	ff 90       	pop	r15
     4e6:	ef 90       	pop	r14
     4e8:	df 90       	pop	r13
     4ea:	cf 90       	pop	r12
     4ec:	bf 90       	pop	r11
     4ee:	af 90       	pop	r10
     4f0:	08 95       	ret

000004f2 <trapezoidalStep>:
	}
	//LCDClear();
	return tabIndex;
}*/

int trapezoidalStep(int dir, int steps, int speedInit, int speedTarget, int tabIndex){
     4f2:	af 92       	push	r10
     4f4:	bf 92       	push	r11
     4f6:	cf 92       	push	r12
     4f8:	df 92       	push	r13
     4fa:	ef 92       	push	r14
     4fc:	ff 92       	push	r15
     4fe:	0f 93       	push	r16
     500:	1f 93       	push	r17
     502:	cf 93       	push	r28
     504:	df 93       	push	r29
     506:	00 d0       	rcall	.+0      	; 0x508 <trapezoidalStep+0x16>
     508:	00 d0       	rcall	.+0      	; 0x50a <trapezoidalStep+0x18>
     50a:	cd b7       	in	r28, 0x3d	; 61
     50c:	de b7       	in	r29, 0x3e	; 62
     50e:	6c 01       	movw	r12, r24
     510:	59 01       	movw	r10, r18
     512:	c8 01       	movw	r24, r16
	volatile int stepsToAcel = 0;
     514:	1a 82       	std	Y+2, r1	; 0x02
     516:	19 82       	std	Y+1, r1	; 0x01
	volatile int speed = speedInit;
     518:	5c 83       	std	Y+4, r21	; 0x04
     51a:	4b 83       	std	Y+3, r20	; 0x03
	volatile int isAccel = 1;
     51c:	21 e0       	ldi	r18, 0x01	; 1
     51e:	30 e0       	ldi	r19, 0x00	; 0
     520:	3e 83       	std	Y+6, r19	; 0x06
     522:	2d 83       	std	Y+5, r18	; 0x05
	for(int i = 0; i < steps; i++){
     524:	16 16       	cp	r1, r22
     526:	17 06       	cpc	r1, r23
     528:	0c f0       	brlt	.+2      	; 0x52c <trapezoidalStep+0x3a>
     52a:	3f c0       	rjmp	.+126    	; 0x5aa <trapezoidalStep+0xb8>
     52c:	7b 01       	movw	r14, r22
		//Accelerate
		if(speed > speedTarget && isAccel){
     52e:	2b 81       	ldd	r18, Y+3	; 0x03
     530:	3c 81       	ldd	r19, Y+4	; 0x04
     532:	a2 16       	cp	r10, r18
     534:	b3 06       	cpc	r11, r19
     536:	c4 f4       	brge	.+48     	; 0x568 <trapezoidalStep+0x76>
     538:	2d 81       	ldd	r18, Y+5	; 0x05
     53a:	3e 81       	ldd	r19, Y+6	; 0x06
     53c:	23 2b       	or	r18, r19
     53e:	a1 f0       	breq	.+40     	; 0x568 <trapezoidalStep+0x76>
			tabIndex = step(dir,1,speed,tabIndex);
     540:	4b 81       	ldd	r20, Y+3	; 0x03
     542:	5c 81       	ldd	r21, Y+4	; 0x04
     544:	9c 01       	movw	r18, r24
     546:	61 e0       	ldi	r22, 0x01	; 1
     548:	70 e0       	ldi	r23, 0x00	; 0
     54a:	c6 01       	movw	r24, r12
     54c:	7a df       	rcall	.-268    	; 0x442 <step>
			speed--;
     54e:	2b 81       	ldd	r18, Y+3	; 0x03
     550:	3c 81       	ldd	r19, Y+4	; 0x04
     552:	21 50       	subi	r18, 0x01	; 1
     554:	31 09       	sbc	r19, r1
     556:	3c 83       	std	Y+4, r19	; 0x04
     558:	2b 83       	std	Y+3, r18	; 0x03
			stepsToAcel++;
     55a:	29 81       	ldd	r18, Y+1	; 0x01
     55c:	3a 81       	ldd	r19, Y+2	; 0x02
     55e:	2f 5f       	subi	r18, 0xFF	; 255
     560:	3f 4f       	sbci	r19, 0xFF	; 255
     562:	3a 83       	std	Y+2, r19	; 0x02
     564:	29 83       	std	Y+1, r18	; 0x01
     566:	1c c0       	rjmp	.+56     	; 0x5a0 <trapezoidalStep+0xae>
		}
		//Constant Speed
		else if((steps - i) > stepsToAcel){
     568:	29 81       	ldd	r18, Y+1	; 0x01
     56a:	3a 81       	ldd	r19, Y+2	; 0x02
     56c:	2e 15       	cp	r18, r14
     56e:	3f 05       	cpc	r19, r15
     570:	44 f4       	brge	.+16     	; 0x582 <trapezoidalStep+0x90>
			tabIndex = step(dir,1,speed,tabIndex);
     572:	4b 81       	ldd	r20, Y+3	; 0x03
     574:	5c 81       	ldd	r21, Y+4	; 0x04
     576:	9c 01       	movw	r18, r24
     578:	61 e0       	ldi	r22, 0x01	; 1
     57a:	70 e0       	ldi	r23, 0x00	; 0
     57c:	c6 01       	movw	r24, r12
     57e:	61 df       	rcall	.-318    	; 0x442 <step>
     580:	0f c0       	rjmp	.+30     	; 0x5a0 <trapezoidalStep+0xae>
		}
		//Decelerate
		else{
			isAccel = 0;
     582:	1e 82       	std	Y+6, r1	; 0x06
     584:	1d 82       	std	Y+5, r1	; 0x05
			tabIndex = step(dir,1,speed,tabIndex);
     586:	4b 81       	ldd	r20, Y+3	; 0x03
     588:	5c 81       	ldd	r21, Y+4	; 0x04
     58a:	9c 01       	movw	r18, r24
     58c:	61 e0       	ldi	r22, 0x01	; 1
     58e:	70 e0       	ldi	r23, 0x00	; 0
     590:	c6 01       	movw	r24, r12
     592:	57 df       	rcall	.-338    	; 0x442 <step>
			speed++;
     594:	2b 81       	ldd	r18, Y+3	; 0x03
     596:	3c 81       	ldd	r19, Y+4	; 0x04
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	3c 83       	std	Y+4, r19	; 0x04
     59e:	2b 83       	std	Y+3, r18	; 0x03
     5a0:	21 e0       	ldi	r18, 0x01	; 1
     5a2:	e2 1a       	sub	r14, r18
     5a4:	f1 08       	sbc	r15, r1

int trapezoidalStep(int dir, int steps, int speedInit, int speedTarget, int tabIndex){
	volatile int stepsToAcel = 0;
	volatile int speed = speedInit;
	volatile int isAccel = 1;
	for(int i = 0; i < steps; i++){
     5a6:	09 f0       	breq	.+2      	; 0x5aa <trapezoidalStep+0xb8>
     5a8:	c2 cf       	rjmp	.-124    	; 0x52e <trapezoidalStep+0x3c>
			speed++;
		}
	}
	//LCDClear();
	return tabIndex;
}
     5aa:	26 96       	adiw	r28, 0x06	; 6
     5ac:	0f b6       	in	r0, 0x3f	; 63
     5ae:	f8 94       	cli
     5b0:	de bf       	out	0x3e, r29	; 62
     5b2:	0f be       	out	0x3f, r0	; 63
     5b4:	cd bf       	out	0x3d, r28	; 61
     5b6:	df 91       	pop	r29
     5b8:	cf 91       	pop	r28
     5ba:	1f 91       	pop	r17
     5bc:	0f 91       	pop	r16
     5be:	ff 90       	pop	r15
     5c0:	ef 90       	pop	r14
     5c2:	df 90       	pop	r13
     5c4:	cf 90       	pop	r12
     5c6:	bf 90       	pop	r11
     5c8:	af 90       	pop	r10
     5ca:	08 95       	ret

000005cc <setPos>:

//Set stepper position in degrees
void setPos(int dir, int speedInit, int speedTarget, int degrees, int tabIndex){
     5cc:	cf 92       	push	r12
     5ce:	df 92       	push	r13
     5d0:	ef 92       	push	r14
     5d2:	ff 92       	push	r15
     5d4:	0f 93       	push	r16
     5d6:	1f 93       	push	r17
     5d8:	cf 93       	push	r28
     5da:	df 93       	push	r29
     5dc:	ec 01       	movw	r28, r24
     5de:	7b 01       	movw	r14, r22
     5e0:	6a 01       	movw	r12, r20
	int steps = ((stepsToFullRotation/360.0)*degrees);
	//PORTC = steps; //Used for debugging
	tableIndex = trapezoidalStep(dir, steps, speedInit, speedTarget, tabIndex);
     5e2:	b9 01       	movw	r22, r18
     5e4:	33 0f       	add	r19, r19
     5e6:	88 0b       	sbc	r24, r24
     5e8:	99 0b       	sbc	r25, r25
     5ea:	38 d5       	rcall	.+2672   	; 0x105c <__floatsisf>
     5ec:	24 ee       	ldi	r18, 0xE4	; 228
     5ee:	38 e3       	ldi	r19, 0x38	; 56
     5f0:	4e e0       	ldi	r20, 0x0E	; 14
     5f2:	5f e3       	ldi	r21, 0x3F	; 63
     5f4:	97 d5       	rcall	.+2862   	; 0x1124 <__mulsf3>
     5f6:	ff d4       	rcall	.+2558   	; 0xff6 <__fixsfsi>
     5f8:	96 01       	movw	r18, r12
     5fa:	a7 01       	movw	r20, r14
     5fc:	ce 01       	movw	r24, r28
     5fe:	79 df       	rcall	.-270    	; 0x4f2 <trapezoidalStep>
     600:	90 93 7f 02 	sts	0x027F, r25	; 0x80027f <tableIndex+0x1>
     604:	80 93 7e 02 	sts	0x027E, r24	; 0x80027e <tableIndex>
}
     608:	df 91       	pop	r29
     60a:	cf 91       	pop	r28
     60c:	1f 91       	pop	r17
     60e:	0f 91       	pop	r16
     610:	ff 90       	pop	r15
     612:	ef 90       	pop	r14
     614:	df 90       	pop	r13
     616:	cf 90       	pop	r12
     618:	08 95       	ret

0000061a <setBucketPos>:

int setBucketPos(int MATERIAL, int currPos){
     61a:	0f 93       	push	r16
     61c:	1f 93       	push	r17
     61e:	cf 93       	push	r28
     620:	df 93       	push	r29
	//Get position in degrees
	int deg = materialPos[MATERIAL];
     622:	fc 01       	movw	r30, r24
     624:	ee 0f       	add	r30, r30
     626:	ff 1f       	adc	r31, r31
     628:	ef 5a       	subi	r30, 0xAF	; 175
     62a:	fd 4f       	sbci	r31, 0xFD	; 253
     62c:	40 81       	ld	r20, Z
     62e:	51 81       	ldd	r21, Z+1	; 0x01
	int currPosDeg = materialPos[currPos];
     630:	fb 01       	movw	r30, r22
     632:	ee 0f       	add	r30, r30
     634:	ff 1f       	adc	r31, r31
     636:	ef 5a       	subi	r30, 0xAF	; 175
     638:	fd 4f       	sbci	r31, 0xFD	; 253
     63a:	20 81       	ld	r18, Z
     63c:	31 81       	ldd	r19, Z+1	; 0x01
	//Determine optimal direction and set stepper to that position
	if(deg == currPosDeg){
     63e:	42 17       	cp	r20, r18
     640:	53 07       	cpc	r21, r19
     642:	09 f4       	brne	.+2      	; 0x646 <setBucketPos+0x2c>
     644:	4c c0       	rjmp	.+152    	; 0x6de <setBucketPos+0xc4>
     646:	ec 01       	movw	r28, r24
		return currPos;
	}
	if((currPosDeg+90) == deg || ((currPosDeg+90) == 360 && MATERIAL==BLACK)){
     648:	c9 01       	movw	r24, r18
     64a:	86 5a       	subi	r24, 0xA6	; 166
     64c:	9f 4f       	sbci	r25, 0xFF	; 255
     64e:	48 17       	cp	r20, r24
     650:	59 07       	cpc	r21, r25
     652:	39 f0       	breq	.+14     	; 0x662 <setBucketPos+0x48>
     654:	2e 30       	cpi	r18, 0x0E	; 14
     656:	81 e0       	ldi	r24, 0x01	; 1
     658:	38 07       	cpc	r19, r24
     65a:	99 f4       	brne	.+38     	; 0x682 <setBucketPos+0x68>
     65c:	c3 30       	cpi	r28, 0x03	; 3
     65e:	d1 05       	cpc	r29, r1
     660:	81 f4       	brne	.+32     	; 0x682 <setBucketPos+0x68>
		setPos(1,17,5,90,tableIndex);
     662:	00 91 7e 02 	lds	r16, 0x027E	; 0x80027e <tableIndex>
     666:	10 91 7f 02 	lds	r17, 0x027F	; 0x80027f <tableIndex+0x1>
     66a:	2a e5       	ldi	r18, 0x5A	; 90
     66c:	30 e0       	ldi	r19, 0x00	; 0
     66e:	45 e0       	ldi	r20, 0x05	; 5
     670:	50 e0       	ldi	r21, 0x00	; 0
     672:	61 e1       	ldi	r22, 0x11	; 17
     674:	70 e0       	ldi	r23, 0x00	; 0
     676:	81 e0       	ldi	r24, 0x01	; 1
     678:	90 e0       	ldi	r25, 0x00	; 0
     67a:	a8 df       	rcall	.-176    	; 0x5cc <setPos>
		setPos(0,17,5,90,tableIndex);
	}
	else{
		setPos(1,17,5,180,tableIndex);
	}
	return MATERIAL;
     67c:	8c 2f       	mov	r24, r28
     67e:	9d 2f       	mov	r25, r29
	//Determine optimal direction and set stepper to that position
	if(deg == currPosDeg){
		return currPos;
	}
	if((currPosDeg+90) == deg || ((currPosDeg+90) == 360 && MATERIAL==BLACK)){
		setPos(1,17,5,90,tableIndex);
     680:	30 c0       	rjmp	.+96     	; 0x6e2 <setBucketPos+0xc8>
	}
	else if((currPosDeg-90) == deg || ((currPosDeg+270) == deg && MATERIAL == STEEL)){
     682:	c9 01       	movw	r24, r18
     684:	8a 55       	subi	r24, 0x5A	; 90
     686:	91 09       	sbc	r25, r1
     688:	48 17       	cp	r20, r24
     68a:	59 07       	cpc	r21, r25
     68c:	41 f0       	breq	.+16     	; 0x69e <setBucketPos+0x84>
     68e:	22 5f       	subi	r18, 0xF2	; 242
     690:	3e 4f       	sbci	r19, 0xFE	; 254
     692:	42 17       	cp	r20, r18
     694:	53 07       	cpc	r21, r19
     696:	99 f4       	brne	.+38     	; 0x6be <setBucketPos+0xa4>
     698:	c1 30       	cpi	r28, 0x01	; 1
     69a:	d1 05       	cpc	r29, r1
     69c:	81 f4       	brne	.+32     	; 0x6be <setBucketPos+0xa4>
		setPos(0,17,5,90,tableIndex);
     69e:	00 91 7e 02 	lds	r16, 0x027E	; 0x80027e <tableIndex>
     6a2:	10 91 7f 02 	lds	r17, 0x027F	; 0x80027f <tableIndex+0x1>
     6a6:	2a e5       	ldi	r18, 0x5A	; 90
     6a8:	30 e0       	ldi	r19, 0x00	; 0
     6aa:	45 e0       	ldi	r20, 0x05	; 5
     6ac:	50 e0       	ldi	r21, 0x00	; 0
     6ae:	61 e1       	ldi	r22, 0x11	; 17
     6b0:	70 e0       	ldi	r23, 0x00	; 0
     6b2:	80 e0       	ldi	r24, 0x00	; 0
     6b4:	90 e0       	ldi	r25, 0x00	; 0
     6b6:	8a df       	rcall	.-236    	; 0x5cc <setPos>
	}
	else{
		setPos(1,17,5,180,tableIndex);
	}
	return MATERIAL;
     6b8:	8c 2f       	mov	r24, r28
     6ba:	9d 2f       	mov	r25, r29
	}
	if((currPosDeg+90) == deg || ((currPosDeg+90) == 360 && MATERIAL==BLACK)){
		setPos(1,17,5,90,tableIndex);
	}
	else if((currPosDeg-90) == deg || ((currPosDeg+270) == deg && MATERIAL == STEEL)){
		setPos(0,17,5,90,tableIndex);
     6bc:	12 c0       	rjmp	.+36     	; 0x6e2 <setBucketPos+0xc8>
	}
	else{
		setPos(1,17,5,180,tableIndex);
     6be:	00 91 7e 02 	lds	r16, 0x027E	; 0x80027e <tableIndex>
     6c2:	10 91 7f 02 	lds	r17, 0x027F	; 0x80027f <tableIndex+0x1>
     6c6:	24 eb       	ldi	r18, 0xB4	; 180
     6c8:	30 e0       	ldi	r19, 0x00	; 0
     6ca:	45 e0       	ldi	r20, 0x05	; 5
     6cc:	50 e0       	ldi	r21, 0x00	; 0
     6ce:	61 e1       	ldi	r22, 0x11	; 17
     6d0:	70 e0       	ldi	r23, 0x00	; 0
     6d2:	81 e0       	ldi	r24, 0x01	; 1
     6d4:	90 e0       	ldi	r25, 0x00	; 0
     6d6:	7a df       	rcall	.-268    	; 0x5cc <setPos>
	}
	return MATERIAL;
     6d8:	8c 2f       	mov	r24, r28
     6da:	9d 2f       	mov	r25, r29
     6dc:	02 c0       	rjmp	.+4      	; 0x6e2 <setBucketPos+0xc8>
	//Get position in degrees
	int deg = materialPos[MATERIAL];
	int currPosDeg = materialPos[currPos];
	//Determine optimal direction and set stepper to that position
	if(deg == currPosDeg){
		return currPos;
     6de:	86 2f       	mov	r24, r22
     6e0:	97 2f       	mov	r25, r23
	}
	else{
		setPos(1,17,5,180,tableIndex);
	}
	return MATERIAL;
}
     6e2:	df 91       	pop	r29
     6e4:	cf 91       	pop	r28
     6e6:	1f 91       	pop	r17
     6e8:	0f 91       	pop	r16
     6ea:	08 95       	ret

000006ec <getMaterial>:

int getMaterial(int adcVal){
	if(adcVal < ALUMINUM_UPPER){ 
     6ec:	8f 3f       	cpi	r24, 0xFF	; 255
     6ee:	91 05       	cpc	r25, r1
     6f0:	94 f0       	brlt	.+36     	; 0x716 <getMaterial+0x2a>
		return ALUMINUM;
	}
	if(adcVal >= STEEL_LOWER && adcVal <= STEEL_UPPER){
     6f2:	9c 01       	movw	r18, r24
     6f4:	20 59       	subi	r18, 0x90	; 144
     6f6:	31 40       	sbci	r19, 0x01	; 1
     6f8:	2d 32       	cpi	r18, 0x2D	; 45
     6fa:	41 e0       	ldi	r20, 0x01	; 1
     6fc:	34 07       	cpc	r19, r20
     6fe:	70 f0       	brcs	.+28     	; 0x71c <getMaterial+0x30>
		return STEEL;
	}
	if(adcVal >= WHITE_LOWER && adcVal <= WHITE_UPPER){
     700:	24 5f       	subi	r18, 0xF4	; 244
     702:	31 40       	sbci	r19, 0x01	; 1
     704:	28 33       	cpi	r18, 0x38	; 56
     706:	31 05       	cpc	r19, r1
     708:	60 f0       	brcs	.+24     	; 0x722 <getMaterial+0x36>
		return WHITE;
	}
	if(adcVal >= BLACK_LOWER){
     70a:	8c 3b       	cpi	r24, 0xBC	; 188
     70c:	93 40       	sbci	r25, 0x03	; 3
     70e:	64 f4       	brge	.+24     	; 0x728 <getMaterial+0x3c>
		return BLACK;
	}
	
	//If classified as none of the items
	return 5;
     710:	85 e0       	ldi	r24, 0x05	; 5
     712:	90 e0       	ldi	r25, 0x00	; 0
     714:	08 95       	ret
	return MATERIAL;
}

int getMaterial(int adcVal){
	if(adcVal < ALUMINUM_UPPER){ 
		return ALUMINUM;
     716:	80 e0       	ldi	r24, 0x00	; 0
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	08 95       	ret
	}
	if(adcVal >= STEEL_LOWER && adcVal <= STEEL_UPPER){
		return STEEL;
     71c:	81 e0       	ldi	r24, 0x01	; 1
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	08 95       	ret
	}
	if(adcVal >= WHITE_LOWER && adcVal <= WHITE_UPPER){
		return WHITE;
     722:	82 e0       	ldi	r24, 0x02	; 2
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	08 95       	ret
	}
	if(adcVal >= BLACK_LOWER){
		return BLACK;
     728:	83 e0       	ldi	r24, 0x03	; 3
     72a:	90 e0       	ldi	r25, 0x00	; 0
	}
	
	//If classified as none of the items
	return 5;
}
     72c:	08 95       	ret

0000072e <homeStepper>:

//Home stepper by spinning until interrupt is triggered
void homeStepper(){
	LCDClear();
     72e:	60 e0       	ldi	r22, 0x00	; 0
     730:	81 e0       	ldi	r24, 0x01	; 1
     732:	29 dd       	rcall	.-1454   	; 0x186 <LCDByte>
	LCDWriteStringXY(0,0,"Homing Stepper..")
     734:	60 e0       	ldi	r22, 0x00	; 0
     736:	80 e0       	ldi	r24, 0x00	; 0
     738:	eb dd       	rcall	.-1066   	; 0x310 <LCDGotoXY>
     73a:	8a e0       	ldi	r24, 0x0A	; 10
     73c:	92 e0       	ldi	r25, 0x02	; 2
     73e:	7d dd       	rcall	.-1286   	; 0x23a <LCDWriteString>
	LCDWriteStringXY(7,1, "3");
     740:	61 e0       	ldi	r22, 0x01	; 1
     742:	87 e0       	ldi	r24, 0x07	; 7
     744:	e5 dd       	rcall	.-1078   	; 0x310 <LCDGotoXY>
     746:	8b e1       	ldi	r24, 0x1B	; 27
     748:	92 e0       	ldi	r25, 0x02	; 2
     74a:	77 dd       	rcall	.-1298   	; 0x23a <LCDWriteString>
	mTimer(1000);
     74c:	88 ee       	ldi	r24, 0xE8	; 232
     74e:	93 e0       	ldi	r25, 0x03	; 3
     750:	58 de       	rcall	.-848    	; 0x402 <mTimer>
	LCDWriteStringXY(7,1, "2");
     752:	61 e0       	ldi	r22, 0x01	; 1
     754:	87 e0       	ldi	r24, 0x07	; 7
     756:	dc dd       	rcall	.-1096   	; 0x310 <LCDGotoXY>
     758:	8d e1       	ldi	r24, 0x1D	; 29
     75a:	92 e0       	ldi	r25, 0x02	; 2
     75c:	6e dd       	rcall	.-1316   	; 0x23a <LCDWriteString>
	mTimer(1000);
     75e:	88 ee       	ldi	r24, 0xE8	; 232
     760:	93 e0       	ldi	r25, 0x03	; 3
     762:	4f de       	rcall	.-866    	; 0x402 <mTimer>
	LCDWriteStringXY(7,1, "1");
     764:	61 e0       	ldi	r22, 0x01	; 1
     766:	87 e0       	ldi	r24, 0x07	; 7
     768:	d3 dd       	rcall	.-1114   	; 0x310 <LCDGotoXY>
     76a:	8f e1       	ldi	r24, 0x1F	; 31
     76c:	92 e0       	ldi	r25, 0x02	; 2
     76e:	65 dd       	rcall	.-1334   	; 0x23a <LCDWriteString>
	mTimer(1000);
     770:	88 ee       	ldi	r24, 0xE8	; 232
     772:	93 e0       	ldi	r25, 0x03	; 3
     774:	46 de       	rcall	.-884    	; 0x402 <mTimer>
     776:	61 e0       	ldi	r22, 0x01	; 1
	LCDWriteStringXY(7,1, " ");
     778:	87 e0       	ldi	r24, 0x07	; 7
     77a:	ca dd       	rcall	.-1132   	; 0x310 <LCDGotoXY>
     77c:	81 e2       	ldi	r24, 0x21	; 33
     77e:	92 e0       	ldi	r25, 0x02	; 2
     780:	5c dd       	rcall	.-1352   	; 0x23a <LCDWriteString>
     782:	80 91 80 02 	lds	r24, 0x0280	; 0x800280 <home_flag>
     786:	90 91 81 02 	lds	r25, 0x0281	; 0x800281 <home_flag+0x1>
	while(!home_flag){
     78a:	89 2b       	or	r24, r25
     78c:	a9 f4       	brne	.+42     	; 0x7b8 <homeStepper+0x8a>
     78e:	20 91 7e 02 	lds	r18, 0x027E	; 0x80027e <tableIndex>
		tableIndex = step(1,1,15,tableIndex);
     792:	30 91 7f 02 	lds	r19, 0x027F	; 0x80027f <tableIndex+0x1>
     796:	4f e0       	ldi	r20, 0x0F	; 15
     798:	50 e0       	ldi	r21, 0x00	; 0
     79a:	61 e0       	ldi	r22, 0x01	; 1
     79c:	70 e0       	ldi	r23, 0x00	; 0
     79e:	81 e0       	ldi	r24, 0x01	; 1
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	4f de       	rcall	.-866    	; 0x442 <step>
     7a4:	90 93 7f 02 	sts	0x027F, r25	; 0x80027f <tableIndex+0x1>
     7a8:	80 93 7e 02 	sts	0x027E, r24	; 0x80027e <tableIndex>
     7ac:	80 91 80 02 	lds	r24, 0x0280	; 0x800280 <home_flag>
     7b0:	90 91 81 02 	lds	r25, 0x0281	; 0x800281 <home_flag+0x1>
	LCDWriteStringXY(7,1, "2");
	mTimer(1000);
	LCDWriteStringXY(7,1, "1");
	mTimer(1000);
	LCDWriteStringXY(7,1, " ");
	while(!home_flag){
     7b4:	89 2b       	or	r24, r25
     7b6:	59 f3       	breq	.-42     	; 0x78e <homeStepper+0x60>
     7b8:	83 e0       	ldi	r24, 0x03	; 3
     7ba:	90 e0       	ldi	r25, 0x00	; 0
     7bc:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <currPosition+0x1>
		tableIndex = step(1,1,15,tableIndex);
	}
	currPosition = 3;
     7c0:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <currPosition>
     7c4:	08 95       	ret

000007c6 <pause>:
     7c6:	cf 93       	push	r28
     7c8:	df 93       	push	r29
     7ca:	ec 01       	movw	r28, r24
}

void pause(int queueSize){
	PORTB = DC_BRAKE;
     7cc:	8f e0       	ldi	r24, 0x0F	; 15
     7ce:	85 b9       	out	0x05, r24	; 5
	mTimer(5);
     7d0:	85 e0       	ldi	r24, 0x05	; 5
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	16 de       	rcall	.-980    	; 0x402 <mTimer>
	LCDClear();
     7d6:	60 e0       	ldi	r22, 0x00	; 0
     7d8:	81 e0       	ldi	r24, 0x01	; 1
     7da:	d5 dc       	rcall	.-1622   	; 0x186 <LCDByte>
	LCDWriteStringXY(0,0,"Belt:")
     7dc:	60 e0       	ldi	r22, 0x00	; 0
     7de:	80 e0       	ldi	r24, 0x00	; 0
     7e0:	97 dd       	rcall	.-1234   	; 0x310 <LCDGotoXY>
     7e2:	83 e2       	ldi	r24, 0x23	; 35
     7e4:	92 e0       	ldi	r25, 0x02	; 2
     7e6:	29 dd       	rcall	.-1454   	; 0x23a <LCDWriteString>
	LCDWriteIntXY(5,0,queueSize,2);
     7e8:	60 e0       	ldi	r22, 0x00	; 0
     7ea:	85 e0       	ldi	r24, 0x05	; 5
     7ec:	91 dd       	rcall	.-1246   	; 0x310 <LCDGotoXY>
     7ee:	62 e0       	ldi	r22, 0x02	; 2
     7f0:	70 e0       	ldi	r23, 0x00	; 0
     7f2:	ce 01       	movw	r24, r28
     7f4:	31 dd       	rcall	.-1438   	; 0x258 <LCDWriteInt>
	LCDWriteStringXY(0,1,"A:");
     7f6:	61 e0       	ldi	r22, 0x01	; 1
     7f8:	80 e0       	ldi	r24, 0x00	; 0
     7fa:	8a dd       	rcall	.-1260   	; 0x310 <LCDGotoXY>
     7fc:	89 e2       	ldi	r24, 0x29	; 41
     7fe:	92 e0       	ldi	r25, 0x02	; 2
     800:	1c dd       	rcall	.-1480   	; 0x23a <LCDWriteString>
     802:	61 e0       	ldi	r22, 0x01	; 1
	LCDWriteIntXY(2,1,sortedMats[ALUMINUM],2);
     804:	82 e0       	ldi	r24, 0x02	; 2
     806:	84 dd       	rcall	.-1272   	; 0x310 <LCDGotoXY>
     808:	c2 e7       	ldi	r28, 0x72	; 114
     80a:	d2 e0       	ldi	r29, 0x02	; 2
     80c:	88 81       	ld	r24, Y
     80e:	99 81       	ldd	r25, Y+1	; 0x01
     810:	62 e0       	ldi	r22, 0x02	; 2
     812:	70 e0       	ldi	r23, 0x00	; 0
     814:	21 dd       	rcall	.-1470   	; 0x258 <LCDWriteInt>
	LCDWriteStringXY(4,1,"S:");
     816:	61 e0       	ldi	r22, 0x01	; 1
     818:	84 e0       	ldi	r24, 0x04	; 4
     81a:	7a dd       	rcall	.-1292   	; 0x310 <LCDGotoXY>
     81c:	8c e2       	ldi	r24, 0x2C	; 44
     81e:	92 e0       	ldi	r25, 0x02	; 2
     820:	0c dd       	rcall	.-1512   	; 0x23a <LCDWriteString>
	LCDWriteIntXY(6,1,sortedMats[STEEL],2);
     822:	61 e0       	ldi	r22, 0x01	; 1
     824:	86 e0       	ldi	r24, 0x06	; 6
     826:	74 dd       	rcall	.-1304   	; 0x310 <LCDGotoXY>
     828:	8a 81       	ldd	r24, Y+2	; 0x02
     82a:	9b 81       	ldd	r25, Y+3	; 0x03
     82c:	62 e0       	ldi	r22, 0x02	; 2
     82e:	70 e0       	ldi	r23, 0x00	; 0
     830:	13 dd       	rcall	.-1498   	; 0x258 <LCDWriteInt>
	LCDWriteStringXY(8,1,"W:");
     832:	61 e0       	ldi	r22, 0x01	; 1
     834:	88 e0       	ldi	r24, 0x08	; 8
     836:	6c dd       	rcall	.-1320   	; 0x310 <LCDGotoXY>
     838:	8f e2       	ldi	r24, 0x2F	; 47
     83a:	92 e0       	ldi	r25, 0x02	; 2
     83c:	fe dc       	rcall	.-1540   	; 0x23a <LCDWriteString>
	LCDWriteIntXY(10,1,sortedMats[WHITE],2);
     83e:	61 e0       	ldi	r22, 0x01	; 1
     840:	8a e0       	ldi	r24, 0x0A	; 10
     842:	66 dd       	rcall	.-1332   	; 0x310 <LCDGotoXY>
     844:	8c 81       	ldd	r24, Y+4	; 0x04
     846:	9d 81       	ldd	r25, Y+5	; 0x05
     848:	62 e0       	ldi	r22, 0x02	; 2
     84a:	70 e0       	ldi	r23, 0x00	; 0
     84c:	05 dd       	rcall	.-1526   	; 0x258 <LCDWriteInt>
	LCDWriteStringXY(12,1,"B:");
     84e:	61 e0       	ldi	r22, 0x01	; 1
     850:	8c e0       	ldi	r24, 0x0C	; 12
     852:	5e dd       	rcall	.-1348   	; 0x310 <LCDGotoXY>
     854:	82 e3       	ldi	r24, 0x32	; 50
     856:	92 e0       	ldi	r25, 0x02	; 2
     858:	f0 dc       	rcall	.-1568   	; 0x23a <LCDWriteString>
     85a:	61 e0       	ldi	r22, 0x01	; 1
	LCDWriteIntXY(14,1,sortedMats[BLACK],2);
     85c:	8e e0       	ldi	r24, 0x0E	; 14
     85e:	58 dd       	rcall	.-1360   	; 0x310 <LCDGotoXY>
     860:	8e 81       	ldd	r24, Y+6	; 0x06
     862:	9f 81       	ldd	r25, Y+7	; 0x07
     864:	62 e0       	ldi	r22, 0x02	; 2
     866:	70 e0       	ldi	r23, 0x00	; 0
     868:	f7 dc       	rcall	.-1554   	; 0x258 <LCDWriteInt>
     86a:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <__data_end>
     86e:	90 91 63 02 	lds	r25, 0x0263	; 0x800263 <__data_end+0x1>
	while(1){
		if(state != PAUSED){
     872:	02 97       	sbiw	r24, 0x02	; 2
     874:	d1 f3       	breq	.-12     	; 0x86a <pause+0xa4>
     876:	60 e0       	ldi	r22, 0x00	; 0
     878:	81 e0       	ldi	r24, 0x01	; 1
     87a:	85 dc       	rcall	.-1782   	; 0x186 <LCDByte>
			LCDClear();
     87c:	87 e0       	ldi	r24, 0x07	; 7
     87e:	85 b9       	out	0x05, r24	; 5
     880:	df 91       	pop	r29
     882:	cf 91       	pop	r28
			PORTB = DC_FORWARD;
     884:	08 95       	ret

00000886 <rampDown>:
     886:	cf 93       	push	r28
			break;
		}
	}
}
     888:	df 93       	push	r29
     88a:	8f e0       	ldi	r24, 0x0F	; 15
     88c:	85 b9       	out	0x05, r24	; 5

int rampDown(){
	//Brake DC Motor
	PORTB = DC_BRAKE;
	mTimer(20);
     88e:	84 e1       	ldi	r24, 0x14	; 20
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	b7 dd       	rcall	.-1170   	; 0x402 <mTimer>
	//Disable all ports (except LCD)
	PORTB = 0x00;
     894:	15 b8       	out	0x05, r1	; 5
	PORTL = 0x00;
     896:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
	PORTA = 0x00;
     89a:	12 b8       	out	0x02, r1	; 2
	PORTF = 0x00;
     89c:	11 ba       	out	0x11, r1	; 17
	PORTE = 0x00;
     89e:	1e b8       	out	0x0e, r1	; 14
	PORTD = 0x00;
     8a0:	1b b8       	out	0x0b, r1	; 11
	//Dsiplay Items
	LCDClear();
     8a2:	60 e0       	ldi	r22, 0x00	; 0
     8a4:	81 e0       	ldi	r24, 0x01	; 1
     8a6:	6f dc       	rcall	.-1826   	; 0x186 <LCDByte>
	LCDWriteStringXY(0,0, "Sys. Disabled");
     8a8:	60 e0       	ldi	r22, 0x00	; 0
     8aa:	80 e0       	ldi	r24, 0x00	; 0
     8ac:	31 dd       	rcall	.-1438   	; 0x310 <LCDGotoXY>
     8ae:	85 e3       	ldi	r24, 0x35	; 53
     8b0:	92 e0       	ldi	r25, 0x02	; 2
     8b2:	c3 dc       	rcall	.-1658   	; 0x23a <LCDWriteString>
	LCDWriteStringXY(0,1,"A:");
     8b4:	61 e0       	ldi	r22, 0x01	; 1
     8b6:	80 e0       	ldi	r24, 0x00	; 0
     8b8:	2b dd       	rcall	.-1450   	; 0x310 <LCDGotoXY>
     8ba:	89 e2       	ldi	r24, 0x29	; 41
     8bc:	92 e0       	ldi	r25, 0x02	; 2
     8be:	bd dc       	rcall	.-1670   	; 0x23a <LCDWriteString>
	LCDWriteIntXY(2,1,sortedMats[ALUMINUM],2);
     8c0:	61 e0       	ldi	r22, 0x01	; 1
     8c2:	82 e0       	ldi	r24, 0x02	; 2
     8c4:	25 dd       	rcall	.-1462   	; 0x310 <LCDGotoXY>
     8c6:	c2 e7       	ldi	r28, 0x72	; 114
     8c8:	d2 e0       	ldi	r29, 0x02	; 2
     8ca:	88 81       	ld	r24, Y
     8cc:	99 81       	ldd	r25, Y+1	; 0x01
     8ce:	62 e0       	ldi	r22, 0x02	; 2
     8d0:	70 e0       	ldi	r23, 0x00	; 0
	LCDWriteStringXY(4,1,"S:");
     8d2:	c2 dc       	rcall	.-1660   	; 0x258 <LCDWriteInt>
     8d4:	61 e0       	ldi	r22, 0x01	; 1
     8d6:	84 e0       	ldi	r24, 0x04	; 4
     8d8:	1b dd       	rcall	.-1482   	; 0x310 <LCDGotoXY>
     8da:	8c e2       	ldi	r24, 0x2C	; 44
     8dc:	92 e0       	ldi	r25, 0x02	; 2
	LCDWriteIntXY(6,1,sortedMats[STEEL],2);
     8de:	ad dc       	rcall	.-1702   	; 0x23a <LCDWriteString>
     8e0:	61 e0       	ldi	r22, 0x01	; 1
     8e2:	86 e0       	ldi	r24, 0x06	; 6
     8e4:	15 dd       	rcall	.-1494   	; 0x310 <LCDGotoXY>
     8e6:	8a 81       	ldd	r24, Y+2	; 0x02
     8e8:	9b 81       	ldd	r25, Y+3	; 0x03
     8ea:	62 e0       	ldi	r22, 0x02	; 2
	LCDWriteStringXY(8,1,"W:");
     8ec:	70 e0       	ldi	r23, 0x00	; 0
     8ee:	b4 dc       	rcall	.-1688   	; 0x258 <LCDWriteInt>
     8f0:	61 e0       	ldi	r22, 0x01	; 1
     8f2:	88 e0       	ldi	r24, 0x08	; 8
     8f4:	0d dd       	rcall	.-1510   	; 0x310 <LCDGotoXY>
     8f6:	8f e2       	ldi	r24, 0x2F	; 47
	LCDWriteIntXY(10,1,sortedMats[WHITE],2);
     8f8:	92 e0       	ldi	r25, 0x02	; 2
     8fa:	9f dc       	rcall	.-1730   	; 0x23a <LCDWriteString>
     8fc:	61 e0       	ldi	r22, 0x01	; 1
     8fe:	8a e0       	ldi	r24, 0x0A	; 10
     900:	07 dd       	rcall	.-1522   	; 0x310 <LCDGotoXY>
     902:	8c 81       	ldd	r24, Y+4	; 0x04
     904:	9d 81       	ldd	r25, Y+5	; 0x05
     906:	62 e0       	ldi	r22, 0x02	; 2
	LCDWriteStringXY(12,1,"B:");
     908:	70 e0       	ldi	r23, 0x00	; 0
     90a:	a6 dc       	rcall	.-1716   	; 0x258 <LCDWriteInt>
     90c:	61 e0       	ldi	r22, 0x01	; 1
     90e:	8c e0       	ldi	r24, 0x0C	; 12
     910:	ff dc       	rcall	.-1538   	; 0x310 <LCDGotoXY>
     912:	82 e3       	ldi	r24, 0x32	; 50
     914:	92 e0       	ldi	r25, 0x02	; 2
     916:	91 dc       	rcall	.-1758   	; 0x23a <LCDWriteString>
	LCDWriteIntXY(14,1,sortedMats[BLACK],2);
     918:	61 e0       	ldi	r22, 0x01	; 1
     91a:	8e e0       	ldi	r24, 0x0E	; 14
     91c:	f9 dc       	rcall	.-1550   	; 0x310 <LCDGotoXY>
     91e:	8e 81       	ldd	r24, Y+6	; 0x06
     920:	9f 81       	ldd	r25, Y+7	; 0x07
     922:	62 e0       	ldi	r22, 0x02	; 2
     924:	70 e0       	ldi	r23, 0x00	; 0
     926:	98 dc       	rcall	.-1744   	; 0x258 <LCDWriteInt>
     928:	80 e0       	ldi	r24, 0x00	; 0
     92a:	90 e0       	ldi	r25, 0x00	; 0
	//Return 0 to main
	return 0;
}
     92c:	df 91       	pop	r29
     92e:	cf 91       	pop	r28
     930:	08 95       	ret

00000932 <getADCVal>:
     932:	ea e7       	ldi	r30, 0x7A	; 122
     934:	f0 e0       	ldi	r31, 0x00	; 0

void getADCVal(){
	//begin conversion
	ADCSRA |= _BV(ADSC);
     936:	80 81       	ld	r24, Z
     938:	80 64       	ori	r24, 0x40	; 64
     93a:	80 83       	st	Z, r24
	//wait for conversion to complete
	while(!ADC_result_flag);
     93c:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <ADC_result_flag>
     940:	90 91 85 02 	lds	r25, 0x0285	; 0x800285 <ADC_result_flag+0x1>
     944:	89 2b       	or	r24, r25
     946:	d1 f3       	breq	.-12     	; 0x93c <getADCVal+0xa>
	//clear flag
	ADC_result_flag = 0;
     948:	10 92 85 02 	sts	0x0285, r1	; 0x800285 <ADC_result_flag+0x1>
     94c:	10 92 84 02 	sts	0x0284, r1	; 0x800284 <ADC_result_flag>
     950:	08 95       	ret

00000952 <main>:
//AL STL WHT BLK
const int materialPos[4] = {90,270,180,0}; //Positions in degrees relative to black, of each material


int main(void)
{
     952:	8f 92       	push	r8
     954:	9f 92       	push	r9
     956:	bf 92       	push	r11
     958:	cf 92       	push	r12
     95a:	df 92       	push	r13
     95c:	ef 92       	push	r14
     95e:	ff 92       	push	r15
     960:	0f 93       	push	r16
     962:	1f 93       	push	r17
     964:	cf 93       	push	r28
     966:	df 93       	push	r29
     968:	cd b7       	in	r28, 0x3d	; 61
     96a:	de b7       	in	r29, 0x3e	; 62
     96c:	2e 97       	sbiw	r28, 0x0e	; 14
     96e:	0f b6       	in	r0, 0x3f	; 63
     970:	f8 94       	cli
     972:	de bf       	out	0x3e, r29	; 62
     974:	0f be       	out	0x3f, r0	; 63
     976:	cd bf       	out	0x3d, r28	; 61
	link *head;
	link *tail;
	link *newLink;
	link *rtnLink;
	
	rtnLink = NULL;
     978:	18 86       	std	Y+8, r1	; 0x08
     97a:	1f 82       	std	Y+7, r1	; 0x07
	newLink = NULL;
     97c:	1e 82       	std	Y+6, r1	; 0x06
     97e:	1d 82       	std	Y+5, r1	; 0x05
	
	setup(&head, &tail);
     980:	be 01       	movw	r22, r28
     982:	6d 5f       	subi	r22, 0xFD	; 253
     984:	7f 4f       	sbci	r23, 0xFF	; 255
     986:	ce 01       	movw	r24, r28
     988:	01 96       	adiw	r24, 0x01	; 1
     98a:	ca dc       	rcall	.-1644   	; 0x320 <setup>
	
	
	/***** Begin Initializations ******/
	
	CLKPR = 0x80; //Allow prescaler to be changed
     98c:	e1 e6       	ldi	r30, 0x61	; 97
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	80 e8       	ldi	r24, 0x80	; 128
     992:	80 83       	st	Z, r24
	CLKPR = 0x01; //Adjust prescaler to set clk to 8MHz
     994:	21 e0       	ldi	r18, 0x01	; 1
     996:	20 83       	st	Z, r18
	
	TCCR1B |= _BV(CS11); //configure timer control register
     998:	e1 e8       	ldi	r30, 0x81	; 129
     99a:	f0 e0       	ldi	r31, 0x00	; 0
     99c:	80 81       	ld	r24, Z
     99e:	82 60       	ori	r24, 0x02	; 2
     9a0:	80 83       	st	Z, r24

	
	//Interrupt initialization
	cli();
     9a2:	f8 94       	cli
	//Setup data direction for interrupt ports
	DDRD = 0b11110000;
     9a4:	90 ef       	ldi	r25, 0xF0	; 240
     9a6:	9a b9       	out	0x0a, r25	; 10
	DDRE = 0b11001111;
     9a8:	8f ec       	ldi	r24, 0xCF	; 207
     9aa:	8d b9       	out	0x0d, r24	; 13
	
	//Setup interrupts to trigger on rising edge
	EIMSK |= (_BV(INT1))|(_BV(INT2))|(_BV(INT3))|(_BV(INT4))|(_BV(INT5)); //enable interrupts 1-5
     9ac:	8d b3       	in	r24, 0x1d	; 29
     9ae:	8e 63       	ori	r24, 0x3E	; 62
     9b0:	8d bb       	out	0x1d, r24	; 29
	EICRA |= 0xBA; //Setup edge triggers for int 0-3, all on falling edge except int 2 triggers rising edge
     9b2:	e9 e6       	ldi	r30, 0x69	; 105
     9b4:	f0 e0       	ldi	r31, 0x00	; 0
     9b6:	80 81       	ld	r24, Z
     9b8:	8a 6b       	ori	r24, 0xBA	; 186
     9ba:	80 83       	st	Z, r24
	EICRB |= 0x0A; //Setup int 4,5, to trigger on falling edge
     9bc:	ea e6       	ldi	r30, 0x6A	; 106
     9be:	f0 e0       	ldi	r31, 0x00	; 0
     9c0:	80 81       	ld	r24, Z
     9c2:	8a 60       	ori	r24, 0x0A	; 10
     9c4:	80 83       	st	Z, r24
	
	//Setup interrupt for timer3
	TCCR3A = 0;
     9c6:	e0 e9       	ldi	r30, 0x90	; 144
     9c8:	f0 e0       	ldi	r31, 0x00	; 0
     9ca:	10 82       	st	Z, r1
	TCCR3A = 0;
     9cc:	10 82       	st	Z, r1
	TCNT3 = 57537; //Set counter so interrupt triggers 1 per millisecond 
     9ce:	41 ec       	ldi	r20, 0xC1	; 193
     9d0:	50 ee       	ldi	r21, 0xE0	; 224
     9d2:	50 93 95 00 	sts	0x0095, r21	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
     9d6:	40 93 94 00 	sts	0x0094, r20	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
	//TCNT = 2^16 - (8e6/(PS*DesiredFreq) - 1) = 2^16 - (8e6/(1*1000) - 1) = 57537
	TIMSK3 |= _BV(TOIE3);
     9da:	e1 e7       	ldi	r30, 0x71	; 113
     9dc:	f0 e0       	ldi	r31, 0x00	; 0
     9de:	80 81       	ld	r24, Z
     9e0:	81 60       	ori	r24, 0x01	; 1
     9e2:	80 83       	st	Z, r24
	TCCR3B = _BV(CS10); //Start timer with no prescaler
     9e4:	20 93 91 00 	sts	0x0091, r18	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
	
	//ADC configuration
	ADCSRA |= _BV(ADEN); //enable ADC
     9e8:	ea e7       	ldi	r30, 0x7A	; 122
     9ea:	f0 e0       	ldi	r31, 0x00	; 0
     9ec:	80 81       	ld	r24, Z
     9ee:	80 68       	ori	r24, 0x80	; 128
     9f0:	80 83       	st	Z, r24
	ADCSRA |= _BV(ADIE); //enable ADC interrupt
     9f2:	80 81       	ld	r24, Z
     9f4:	88 60       	ori	r24, 0x08	; 8
     9f6:	80 83       	st	Z, r24
	ADMUX |= _BV(REFS0)|_BV(MUX0); //Configure multiplexer to use voltage reference 0 and to left adjust result
     9f8:	ac e7       	ldi	r26, 0x7C	; 124
     9fa:	b0 e0       	ldi	r27, 0x00	; 0
     9fc:	8c 91       	ld	r24, X
     9fe:	81 64       	ori	r24, 0x41	; 65
     a00:	8c 93       	st	X, r24
	
	sei();
     a02:	78 94       	sei
	
	/*PWM init*/
	//Sets OCRA to be updated at TOP, TOP to be max value (0xFF), and TOV set at MAX
	TCCR0A = 0x03;
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0x00;
     a08:	15 bc       	out	0x25, r1	; 37
	
	//Set compare register to clear on compare and set at TOP
	TCCR0A |= 0x80;
     a0a:	84 b5       	in	r24, 0x24	; 36
     a0c:	80 68       	ori	r24, 0x80	; 128
     a0e:	84 bd       	out	0x24, r24	; 36
	
	//Set prescaler/clock frequency
	TCCR0B |= 0x03;
     a10:	85 b5       	in	r24, 0x25	; 37
     a12:	83 60       	ori	r24, 0x03	; 3
     a14:	85 bd       	out	0x25, r24	; 37
	
	//Set duty cycle through OCRA
	OCR0A = DC_SPEED;
     a16:	80 e6       	ldi	r24, 0x60	; 96
     a18:	87 bd       	out	0x27, r24	; 39
	
	//Set DDRB to appropriate pin (PB7)
	DDRB = 0x8F;
     a1a:	8f e8       	ldi	r24, 0x8F	; 143
     a1c:	84 b9       	out	0x04, r24	; 4
	DDRF = 0x00;
     a1e:	10 ba       	out	0x10, r1	; 16
	DDRA = 0x0F;
     a20:	8f e0       	ldi	r24, 0x0F	; 15
     a22:	81 b9       	out	0x01, r24	; 1
	DDRC = 0xFF;
     a24:	8f ef       	ldi	r24, 0xFF	; 255
     a26:	87 b9       	out	0x07, r24	; 7
	DDRL = 0xF0;
     a28:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <__TEXT_REGION_LENGTH__+0x70010a>
	
	
	//begin convesion
	ADCSRA |= _BV(ADSC);
     a2c:	80 81       	ld	r24, Z
     a2e:	80 64       	ori	r24, 0x40	; 64
     a30:	80 83       	st	Z, r24
	//wait for conversion to complete
	while(!ADC_result_flag);
     a32:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <ADC_result_flag>
     a36:	90 91 85 02 	lds	r25, 0x0285	; 0x800285 <ADC_result_flag+0x1>
     a3a:	89 2b       	or	r24, r25
     a3c:	d1 f3       	breq	.-12     	; 0xa32 <main+0xe0>
	//clear flag
	ADC_result_flag = 0;
     a3e:	10 92 85 02 	sts	0x0285, r1	; 0x800285 <ADC_result_flag+0x1>
     a42:	10 92 84 02 	sts	0x0284, r1	; 0x800284 <ADC_result_flag>
	
	lowestADCVal = 1024;
     a46:	80 e0       	ldi	r24, 0x00	; 0
     a48:	94 e0       	ldi	r25, 0x04	; 4
     a4a:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <lowestADCVal+0x1>
     a4e:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <lowestADCVal>
	
	//init LCD
	InitLCD(LS_ULINE);
     a52:	82 e0       	ldi	r24, 0x02	; 2
     a54:	c3 db       	rcall	.-2170   	; 0x1dc <InitLCD>
	LCDClear();
     a56:	60 e0       	ldi	r22, 0x00	; 0
     a58:	81 e0       	ldi	r24, 0x01	; 1
	
	//Home Stepper Motor
	homeStepper();
     a5a:	95 db       	rcall	.-2262   	; 0x186 <LCDByte>
	LCDClear();
     a5c:	68 de       	rcall	.-816    	; 0x72e <homeStepper>
     a5e:	60 e0       	ldi	r22, 0x00	; 0
     a60:	81 e0       	ldi	r24, 0x01	; 1
     a62:	91 db       	rcall	.-2270   	; 0x186 <LCDByte>
	/******** END INIT *******/
	state = SYSTEM_ON;
     a64:	81 e0       	ldi	r24, 0x01	; 1
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	90 93 63 02 	sts	0x0263, r25	; 0x800263 <__data_end+0x1>
     a6c:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <__data_end>
	
	//Start DC motor
	PORTB |= DC_FORWARD;
     a70:	85 b1       	in	r24, 0x05	; 5
     a72:	87 60       	ori	r24, 0x07	; 7
     a74:	85 b9       	out	0x05, r24	; 5
	
	/*****************************Main Loop*************************************/
	/**************************************************************************/
	
	volatile unsigned int readyToStore = 0;
     a76:	1a 86       	std	Y+10, r1	; 0x0a
     a78:	19 86       	std	Y+9, r1	; 0x09
	volatile uint32_t rampTime = 0;
     a7a:	1b 86       	std	Y+11, r1	; 0x0b
     a7c:	1c 86       	std	Y+12, r1	; 0x0c
     a7e:	1d 86       	std	Y+13, r1	; 0x0d
     a80:	1e 86       	std	Y+14, r1	; 0x0e
			case PAUSED:
				pause(size(&head,&tail));
				break;
			case RAMPDN:
				rampTime = millis;
				isRampDown = 1;
     a82:	01 e0       	ldi	r16, 0x01	; 1
     a84:	10 e0       	ldi	r17, 0x00	; 0
						 LCDWriteIntXY(10,0,rtnLink->e.itemCode,1);
						 }*/
					//Display item code (For Debug)
					//LCDWriteIntXY(10,0,rtnLink->e.itemCode,4);
					sortedMats[(int)rtnLink->e.itemCode]++;
					PORTL = rtnLink->e.itemCode << 4;
     a86:	0f 2e       	mov	r0, r31
     a88:	fb e0       	ldi	r31, 0x0B	; 11
     a8a:	cf 2e       	mov	r12, r31
     a8c:	dd 24       	eor	r13, r13
     a8e:	d3 94       	inc	r13
     a90:	f0 2d       	mov	r31, r0
					
					//Stop DC Motor
					PORTB = DC_BRAKE;
     a92:	0f 2e       	mov	r0, r31
     a94:	ff e0       	ldi	r31, 0x0F	; 15
     a96:	bf 2e       	mov	r11, r31
     a98:	f0 2d       	mov	r31, r0
						setup(&head,&tail);
					}
					initLink(&newLink);
					newLink->e.itemCode = getMaterial(lowestADCVal);;
					enqueue(&head, &tail, &newLink);
					lowestADCVal = 1024;
     a9a:	e1 2c       	mov	r14, r1
     a9c:	68 94       	set
     a9e:	ff 24       	eor	r15, r15
     aa0:	f2 f8       	bld	r15, 2
	
	volatile unsigned int readyToStore = 0;
	volatile uint32_t rampTime = 0;
	
	while(1){
		switch(state){
     aa2:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <__data_end>
     aa6:	90 91 63 02 	lds	r25, 0x0263	; 0x800263 <__data_end+0x1>
     aaa:	82 30       	cpi	r24, 0x02	; 2
     aac:	91 05       	cpc	r25, r1
     aae:	09 f4       	brne	.+2      	; 0xab2 <main+0x160>
     ab0:	ee c0       	rjmp	.+476    	; 0xc8e <main+0x33c>
     ab2:	83 30       	cpi	r24, 0x03	; 3
     ab4:	91 05       	cpc	r25, r1
     ab6:	09 f4       	brne	.+2      	; 0xaba <main+0x168>
     ab8:	f2 c0       	rjmp	.+484    	; 0xc9e <main+0x34c>
     aba:	01 97       	sbiw	r24, 0x01	; 1
     abc:	09 f0       	breq	.+2      	; 0xac0 <main+0x16e>
			case SYSTEM_ON:
				LCDWriteIntXY(7,1,size(&head,&tail),1)
     abe:	04 c1       	rjmp	.+520    	; 0xcc8 <main+0x376>
     ac0:	61 e0       	ldi	r22, 0x01	; 1
     ac2:	87 e0       	ldi	r24, 0x07	; 7
     ac4:	25 dc       	rcall	.-1974   	; 0x310 <LCDGotoXY>
     ac6:	be 01       	movw	r22, r28
     ac8:	6d 5f       	subi	r22, 0xFD	; 253
     aca:	7f 4f       	sbci	r23, 0xFF	; 255
     acc:	ce 01       	movw	r24, r28
     ace:	01 96       	adiw	r24, 0x01	; 1
     ad0:	87 dc       	rcall	.-1778   	; 0x3e0 <size>
     ad2:	b8 01       	movw	r22, r16
     ad4:	c1 db       	rcall	.-2174   	; 0x258 <LCDWriteInt>
				if(measureADC){
     ad6:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <measureADC>
     ada:	90 91 7d 02 	lds	r25, 0x027D	; 0x80027d <measureADC+0x1>
					while(PIND & 0x04){
     ade:	89 2b       	or	r24, r25
     ae0:	a9 f0       	breq	.+42     	; 0xb0c <main+0x1ba>
						getADCVal();
     ae2:	4a 9b       	sbis	0x09, 2	; 9
     ae4:	0d c0       	rjmp	.+26     	; 0xb00 <main+0x1ae>
						LCDWriteIntXY(0,1,lowestADCVal,4)
     ae6:	25 df       	rcall	.-438    	; 0x932 <getADCVal>
     ae8:	61 e0       	ldi	r22, 0x01	; 1
     aea:	80 e0       	ldi	r24, 0x00	; 0
     aec:	11 dc       	rcall	.-2014   	; 0x310 <LCDGotoXY>
     aee:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <lowestADCVal>
     af2:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <lowestADCVal+0x1>
     af6:	64 e0       	ldi	r22, 0x04	; 4
     af8:	70 e0       	ldi	r23, 0x00	; 0
     afa:	ae db       	rcall	.-2212   	; 0x258 <LCDWriteInt>
	while(1){
		switch(state){
			case SYSTEM_ON:
				LCDWriteIntXY(7,1,size(&head,&tail),1)
				if(measureADC){
					while(PIND & 0x04){
     afc:	4a 99       	sbic	0x09, 2	; 9
     afe:	f3 cf       	rjmp	.-26     	; 0xae6 <main+0x194>
						getADCVal();
						LCDWriteIntXY(0,1,lowestADCVal,4)
					}
					measureADC = 0;
     b00:	10 92 7d 02 	sts	0x027D, r1	; 0x80027d <measureADC+0x1>
     b04:	10 92 7c 02 	sts	0x027C, r1	; 0x80027c <measureADC>
					readyToStore = 1;
     b08:	1a 87       	std	Y+10, r17	; 0x0a
				}
				if(readyToStore){
     b0a:	09 87       	std	Y+9, r16	; 0x09
     b0c:	89 85       	ldd	r24, Y+9	; 0x09
     b0e:	9a 85       	ldd	r25, Y+10	; 0x0a
     b10:	89 2b       	or	r24, r25
					if(size(&head,&tail) == 0){
     b12:	49 f1       	breq	.+82     	; 0xb66 <main+0x214>
     b14:	be 01       	movw	r22, r28
     b16:	6d 5f       	subi	r22, 0xFD	; 253
     b18:	7f 4f       	sbci	r23, 0xFF	; 255
     b1a:	ce 01       	movw	r24, r28
     b1c:	01 96       	adiw	r24, 0x01	; 1
     b1e:	60 dc       	rcall	.-1856   	; 0x3e0 <size>
						setup(&head,&tail);
     b20:	89 2b       	or	r24, r25
     b22:	31 f4       	brne	.+12     	; 0xb30 <main+0x1de>
     b24:	be 01       	movw	r22, r28
     b26:	6d 5f       	subi	r22, 0xFD	; 253
     b28:	7f 4f       	sbci	r23, 0xFF	; 255
     b2a:	ce 01       	movw	r24, r28
					}
					initLink(&newLink);
     b2c:	01 96       	adiw	r24, 0x01	; 1
     b2e:	f8 db       	rcall	.-2064   	; 0x320 <setup>
     b30:	ce 01       	movw	r24, r28
     b32:	05 96       	adiw	r24, 0x05	; 5
					newLink->e.itemCode = getMaterial(lowestADCVal);;
     b34:	fc db       	rcall	.-2056   	; 0x32e <initLink>
     b36:	8d 80       	ldd	r8, Y+5	; 0x05
     b38:	9e 80       	ldd	r9, Y+6	; 0x06
     b3a:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <lowestADCVal>
     b3e:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <lowestADCVal+0x1>
     b42:	d4 dd       	rcall	.-1112   	; 0x6ec <getMaterial>
     b44:	f4 01       	movw	r30, r8
					enqueue(&head, &tail, &newLink);
     b46:	80 83       	st	Z, r24
     b48:	ae 01       	movw	r20, r28
     b4a:	4b 5f       	subi	r20, 0xFB	; 251
     b4c:	5f 4f       	sbci	r21, 0xFF	; 255
     b4e:	be 01       	movw	r22, r28
     b50:	6d 5f       	subi	r22, 0xFD	; 253
     b52:	7f 4f       	sbci	r23, 0xFF	; 255
     b54:	ce 01       	movw	r24, r28
     b56:	01 96       	adiw	r24, 0x01	; 1
     b58:	f8 db       	rcall	.-2064   	; 0x34a <enqueue>
					lowestADCVal = 1024;
     b5a:	f0 92 09 02 	sts	0x0209, r15	; 0x800209 <lowestADCVal+0x1>
     b5e:	e0 92 08 02 	sts	0x0208, r14	; 0x800208 <lowestADCVal>
					readyToStore = 0;
     b62:	1a 86       	std	Y+10, r1	; 0x0a
				}
				//Check whether to pop item from conveyor belt and linked list
				if(popItem && size(&head, &tail) > 0){
     b64:	19 86       	std	Y+9, r1	; 0x09
     b66:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <popItem>
     b6a:	90 91 7b 02 	lds	r25, 0x027B	; 0x80027b <popItem+0x1>
     b6e:	89 2b       	or	r24, r25
     b70:	09 f4       	brne	.+2      	; 0xb74 <main+0x222>
     b72:	4d c0       	rjmp	.+154    	; 0xc0e <main+0x2bc>
     b74:	be 01       	movw	r22, r28
     b76:	6d 5f       	subi	r22, 0xFD	; 253
     b78:	7f 4f       	sbci	r23, 0xFF	; 255
     b7a:	ce 01       	movw	r24, r28
     b7c:	01 96       	adiw	r24, 0x01	; 1
     b7e:	30 dc       	rcall	.-1952   	; 0x3e0 <size>
     b80:	18 16       	cp	r1, r24
     b82:	19 06       	cpc	r1, r25
     b84:	0c f0       	brlt	.+2      	; 0xb88 <main+0x236>
					//Dequeue item
					dequeue(&head, &rtnLink);
     b86:	43 c0       	rjmp	.+134    	; 0xc0e <main+0x2bc>
     b88:	be 01       	movw	r22, r28
     b8a:	69 5f       	subi	r22, 0xF9	; 249
     b8c:	7f 4f       	sbci	r23, 0xFF	; 255
     b8e:	ce 01       	movw	r24, r28
     b90:	01 96       	adiw	r24, 0x01	; 1
     b92:	f9 db       	rcall	.-2062   	; 0x386 <dequeue>
					else{
						 LCDWriteIntXY(10,0,rtnLink->e.itemCode,1);
						 }*/
					//Display item code (For Debug)
					//LCDWriteIntXY(10,0,rtnLink->e.itemCode,4);
					sortedMats[(int)rtnLink->e.itemCode]++;
     b94:	af 81       	ldd	r26, Y+7	; 0x07
     b96:	b8 85       	ldd	r27, Y+8	; 0x08
     b98:	ec 91       	ld	r30, X
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	ee 0f       	add	r30, r30
     b9e:	ff 1f       	adc	r31, r31
     ba0:	ee 58       	subi	r30, 0x8E	; 142
     ba2:	fd 4f       	sbci	r31, 0xFD	; 253
     ba4:	80 81       	ld	r24, Z
     ba6:	91 81       	ldd	r25, Z+1	; 0x01
     ba8:	01 96       	adiw	r24, 0x01	; 1
     baa:	91 83       	std	Z+1, r25	; 0x01
					PORTL = rtnLink->e.itemCode << 4;
     bac:	80 83       	st	Z, r24
     bae:	8c 91       	ld	r24, X
     bb0:	82 95       	swap	r24
     bb2:	80 7f       	andi	r24, 0xF0	; 240
     bb4:	f6 01       	movw	r30, r12
					
					//Stop DC Motor
					PORTB = DC_BRAKE;
     bb6:	80 83       	st	Z, r24
					mTimer(5); //Wait 5 milliseconds for complete stop
     bb8:	b5 b8       	out	0x05, r11	; 5
     bba:	85 e0       	ldi	r24, 0x05	; 5
     bbc:	90 e0       	ldi	r25, 0x00	; 0
					//Set stepper to correct position
					currPosition = setBucketPos(rtnLink->e.itemCode, currPosition);
     bbe:	21 dc       	rcall	.-1982   	; 0x402 <mTimer>
     bc0:	60 91 06 02 	lds	r22, 0x0206	; 0x800206 <currPosition>
     bc4:	70 91 07 02 	lds	r23, 0x0207	; 0x800207 <currPosition+0x1>
     bc8:	ef 81       	ldd	r30, Y+7	; 0x07
     bca:	f8 85       	ldd	r31, Y+8	; 0x08
     bcc:	80 81       	ld	r24, Z
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	24 dd       	rcall	.-1464   	; 0x61a <setBucketPos>
     bd2:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <currPosition+0x1>
     bd6:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <currPosition>
					//Start DC Motor
					PORTB = DC_FORWARD;
     bda:	87 e0       	ldi	r24, 0x07	; 7
     bdc:	85 b9       	out	0x05, r24	; 5
					free(rtnLink);
     bde:	8f 81       	ldd	r24, Y+7	; 0x07
     be0:	98 85       	ldd	r25, Y+8	; 0x08
     be2:	ea d3       	rcall	.+2004   	; 0x13b8 <free>
     be4:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <popItem+0x1>
					popItem = 0;
     be8:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <popItem>
     bec:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <millis>
					popTime = millis;
     bf0:	90 91 6d 02 	lds	r25, 0x026D	; 0x80026d <millis+0x1>
     bf4:	a0 91 6e 02 	lds	r26, 0x026E	; 0x80026e <millis+0x2>
     bf8:	b0 91 6f 02 	lds	r27, 0x026F	; 0x80026f <millis+0x3>
     bfc:	80 93 64 02 	sts	0x0264, r24	; 0x800264 <popTime>
     c00:	90 93 65 02 	sts	0x0265, r25	; 0x800265 <popTime+0x1>
     c04:	a0 93 66 02 	sts	0x0266, r26	; 0x800266 <popTime+0x2>
     c08:	b0 93 67 02 	sts	0x0267, r27	; 0x800267 <popTime+0x3>
     c0c:	12 c0       	rjmp	.+36     	; 0xc32 <main+0x2e0>
				}
				else if((popItem && size(&head, &tail)==0)){
     c0e:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <popItem>
     c12:	90 91 7b 02 	lds	r25, 0x027B	; 0x80027b <popItem+0x1>
     c16:	89 2b       	or	r24, r25
     c18:	61 f0       	breq	.+24     	; 0xc32 <main+0x2e0>
     c1a:	be 01       	movw	r22, r28
     c1c:	6d 5f       	subi	r22, 0xFD	; 253
     c1e:	7f 4f       	sbci	r23, 0xFF	; 255
     c20:	ce 01       	movw	r24, r28
     c22:	01 96       	adiw	r24, 0x01	; 1
     c24:	dd db       	rcall	.-2118   	; 0x3e0 <size>
     c26:	89 2b       	or	r24, r25
     c28:	21 f4       	brne	.+8      	; 0xc32 <main+0x2e0>
     c2a:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <popItem+0x1>
					popItem = 0;
     c2e:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <popItem>
     c32:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <isRampDown>
				}
				
				if(isRampDown){
     c36:	90 91 71 02 	lds	r25, 0x0271	; 0x800271 <isRampDown+0x1>
     c3a:	89 2b       	or	r24, r25
     c3c:	09 f4       	brne	.+2      	; 0xc40 <main+0x2ee>
     c3e:	31 cf       	rjmp	.-414    	; 0xaa2 <main+0x150>
     c40:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <millis>
					//Check if it has been 8 seconds
					if((millis-rampTime) > 8000){
     c44:	90 91 6d 02 	lds	r25, 0x026D	; 0x80026d <millis+0x1>
     c48:	a0 91 6e 02 	lds	r26, 0x026E	; 0x80026e <millis+0x2>
     c4c:	b0 91 6f 02 	lds	r27, 0x026F	; 0x80026f <millis+0x3>
     c50:	4b 85       	ldd	r20, Y+11	; 0x0b
     c52:	5c 85       	ldd	r21, Y+12	; 0x0c
     c54:	6d 85       	ldd	r22, Y+13	; 0x0d
     c56:	7e 85       	ldd	r23, Y+14	; 0x0e
     c58:	84 1b       	sub	r24, r20
     c5a:	95 0b       	sbc	r25, r21
     c5c:	a6 0b       	sbc	r26, r22
     c5e:	b7 0b       	sbc	r27, r23
     c60:	81 34       	cpi	r24, 0x41	; 65
     c62:	9f 41       	sbci	r25, 0x1F	; 31
     c64:	a1 05       	cpc	r26, r1
     c66:	b1 05       	cpc	r27, r1
						//Check if there are still items on conveyor
						if(size(&head,&tail)==0){
     c68:	08 f4       	brcc	.+2      	; 0xc6c <main+0x31a>
     c6a:	1b cf       	rjmp	.-458    	; 0xaa2 <main+0x150>
     c6c:	be 01       	movw	r22, r28
     c6e:	6d 5f       	subi	r22, 0xFD	; 253
     c70:	7f 4f       	sbci	r23, 0xFF	; 255
     c72:	ce 01       	movw	r24, r28
     c74:	01 96       	adiw	r24, 0x01	; 1
     c76:	b4 db       	rcall	.-2200   	; 0x3e0 <size>
							//delete linked list and free memory
							clearQueue(&head,&tail);
     c78:	89 2b       	or	r24, r25
     c7a:	09 f0       	breq	.+2      	; 0xc7e <main+0x32c>
     c7c:	12 cf       	rjmp	.-476    	; 0xaa2 <main+0x150>
     c7e:	be 01       	movw	r22, r28
     c80:	6d 5f       	subi	r22, 0xFD	; 253
     c82:	7f 4f       	sbci	r23, 0xFF	; 255
     c84:	ce 01       	movw	r24, r28
							//Call ramp down subroutine
							return rampDown();
     c86:	01 96       	adiw	r24, 0x01	; 1
     c88:	8f db       	rcall	.-2274   	; 0x3a8 <clearQueue>
     c8a:	fd dd       	rcall	.-1030   	; 0x886 <rampDown>
				
				break;
				
				
			case PAUSED:
				pause(size(&head,&tail));
     c8c:	24 c0       	rjmp	.+72     	; 0xcd6 <main+0x384>
     c8e:	be 01       	movw	r22, r28
     c90:	6d 5f       	subi	r22, 0xFD	; 253
     c92:	7f 4f       	sbci	r23, 0xFF	; 255
     c94:	ce 01       	movw	r24, r28
     c96:	01 96       	adiw	r24, 0x01	; 1
     c98:	a3 db       	rcall	.-2234   	; 0x3e0 <size>
     c9a:	95 dd       	rcall	.-1238   	; 0x7c6 <pause>
				break;
			case RAMPDN:
				rampTime = millis;
     c9c:	02 cf       	rjmp	.-508    	; 0xaa2 <main+0x150>
     c9e:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <millis>
     ca2:	90 91 6d 02 	lds	r25, 0x026D	; 0x80026d <millis+0x1>
     ca6:	a0 91 6e 02 	lds	r26, 0x026E	; 0x80026e <millis+0x2>
     caa:	b0 91 6f 02 	lds	r27, 0x026F	; 0x80026f <millis+0x3>
     cae:	8b 87       	std	Y+11, r24	; 0x0b
     cb0:	9c 87       	std	Y+12, r25	; 0x0c
     cb2:	ad 87       	std	Y+13, r26	; 0x0d
				isRampDown = 1;
     cb4:	be 87       	std	Y+14, r27	; 0x0e
     cb6:	10 93 71 02 	sts	0x0271, r17	; 0x800271 <isRampDown+0x1>
     cba:	00 93 70 02 	sts	0x0270, r16	; 0x800270 <isRampDown>
				state = SYSTEM_ON;
     cbe:	10 93 63 02 	sts	0x0263, r17	; 0x800263 <__data_end+0x1>
     cc2:	00 93 62 02 	sts	0x0262, r16	; 0x800262 <__data_end>
				break;
			default:
				LCDWriteStringXY(0,0,"Invalid State");
     cc6:	ed ce       	rjmp	.-550    	; 0xaa2 <main+0x150>
     cc8:	60 e0       	ldi	r22, 0x00	; 0
     cca:	80 e0       	ldi	r24, 0x00	; 0
     ccc:	21 db       	rcall	.-2494   	; 0x310 <LCDGotoXY>
     cce:	83 e4       	ldi	r24, 0x43	; 67
     cd0:	92 e0       	ldi	r25, 0x02	; 2
     cd2:	b3 da       	rcall	.-2714   	; 0x23a <LCDWriteString>
     cd4:	e6 ce       	rjmp	.-564    	; 0xaa2 <main+0x150>
				break;
     cd6:	2e 96       	adiw	r28, 0x0e	; 14
		}
	}
	
	
	return 0;
}
     cd8:	0f b6       	in	r0, 0x3f	; 63
     cda:	f8 94       	cli
     cdc:	de bf       	out	0x3e, r29	; 62
     cde:	0f be       	out	0x3f, r0	; 63
     ce0:	cd bf       	out	0x3d, r28	; 61
     ce2:	df 91       	pop	r29
     ce4:	cf 91       	pop	r28
     ce6:	1f 91       	pop	r17
     ce8:	0f 91       	pop	r16
     cea:	ff 90       	pop	r15
     cec:	ef 90       	pop	r14
     cee:	df 90       	pop	r13
     cf0:	cf 90       	pop	r12
     cf2:	bf 90       	pop	r11
     cf4:	9f 90       	pop	r9
     cf6:	8f 90       	pop	r8
     cf8:	08 95       	ret

00000cfa <__vector_2>:
     cfa:	1f 92       	push	r1

/*****************Interrupt service routines:*************************************/
/********************************************************************************/

//Hall Effect
ISR(INT1_vect){
     cfc:	0f 92       	push	r0
     cfe:	0f b6       	in	r0, 0x3f	; 63
     d00:	0f 92       	push	r0
     d02:	11 24       	eor	r1, r1
     d04:	8f 93       	push	r24
     d06:	9f 93       	push	r25
	if(state == INIT_SYS){
     d08:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <__data_end>
     d0c:	90 91 63 02 	lds	r25, 0x0263	; 0x800263 <__data_end+0x1>
     d10:	89 2b       	or	r24, r25
     d12:	31 f4       	brne	.+12     	; 0xd20 <__vector_2+0x26>
		home_flag = 1;
     d14:	81 e0       	ldi	r24, 0x01	; 1
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	90 93 81 02 	sts	0x0281, r25	; 0x800281 <home_flag+0x1>
     d1c:	80 93 80 02 	sts	0x0280, r24	; 0x800280 <home_flag>
		//LCDClear();
		//LCDWriteStringXY(0,0,"Int 1")
	}
}
     d20:	9f 91       	pop	r25
     d22:	8f 91       	pop	r24
     d24:	0f 90       	pop	r0
     d26:	0f be       	out	0x3f, r0	; 63
     d28:	0f 90       	pop	r0
     d2a:	1f 90       	pop	r1
     d2c:	18 95       	reti

00000d2e <__vector_3>:

//Optical Sensor Refl
ISR(INT2_vect){
     d2e:	1f 92       	push	r1
     d30:	0f 92       	push	r0
     d32:	0f b6       	in	r0, 0x3f	; 63
     d34:	0f 92       	push	r0
     d36:	11 24       	eor	r1, r1
     d38:	0b b6       	in	r0, 0x3b	; 59
     d3a:	0f 92       	push	r0
     d3c:	2f 93       	push	r18
     d3e:	3f 93       	push	r19
     d40:	4f 93       	push	r20
     d42:	5f 93       	push	r21
     d44:	6f 93       	push	r22
     d46:	7f 93       	push	r23
     d48:	8f 93       	push	r24
     d4a:	9f 93       	push	r25
     d4c:	af 93       	push	r26
     d4e:	bf 93       	push	r27
     d50:	ef 93       	push	r30
     d52:	ff 93       	push	r31
	mTimer(1);
     d54:	81 e0       	ldi	r24, 0x01	; 1
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	54 db       	rcall	.-2392   	; 0x402 <mTimer>
	if(PIND & 0x04){
     d5a:	4a 9b       	sbis	0x09, 2	; 9
     d5c:	0c c0       	rjmp	.+24     	; 0xd76 <__vector_3+0x48>
		if(state == SYSTEM_ON){
     d5e:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <__data_end>
     d62:	90 91 63 02 	lds	r25, 0x0263	; 0x800263 <__data_end+0x1>
     d66:	01 97       	sbiw	r24, 0x01	; 1
     d68:	31 f4       	brne	.+12     	; 0xd76 <__vector_3+0x48>
			measureADC = 1;
     d6a:	81 e0       	ldi	r24, 0x01	; 1
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	90 93 7d 02 	sts	0x027D, r25	; 0x80027d <measureADC+0x1>
     d72:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <measureADC>
		}
	}
}
     d76:	ff 91       	pop	r31
     d78:	ef 91       	pop	r30
     d7a:	bf 91       	pop	r27
     d7c:	af 91       	pop	r26
     d7e:	9f 91       	pop	r25
     d80:	8f 91       	pop	r24
     d82:	7f 91       	pop	r23
     d84:	6f 91       	pop	r22
     d86:	5f 91       	pop	r21
     d88:	4f 91       	pop	r20
     d8a:	3f 91       	pop	r19
     d8c:	2f 91       	pop	r18
     d8e:	0f 90       	pop	r0
     d90:	0b be       	out	0x3b, r0	; 59
     d92:	0f 90       	pop	r0
     d94:	0f be       	out	0x3f, r0	; 63
     d96:	0f 90       	pop	r0
     d98:	1f 90       	pop	r1
     d9a:	18 95       	reti

00000d9c <__vector_4>:

//Exit Sensor
ISR(INT3_vect){
     d9c:	1f 92       	push	r1
     d9e:	0f 92       	push	r0
     da0:	0f b6       	in	r0, 0x3f	; 63
     da2:	0f 92       	push	r0
     da4:	11 24       	eor	r1, r1
     da6:	4f 93       	push	r20
     da8:	5f 93       	push	r21
     daa:	6f 93       	push	r22
     dac:	7f 93       	push	r23
     dae:	8f 93       	push	r24
     db0:	9f 93       	push	r25
     db2:	af 93       	push	r26
     db4:	bf 93       	push	r27
	//mTimer(15);
	if((millis - popTime)>100){
     db6:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <millis>
     dba:	90 91 6d 02 	lds	r25, 0x026D	; 0x80026d <millis+0x1>
     dbe:	a0 91 6e 02 	lds	r26, 0x026E	; 0x80026e <millis+0x2>
     dc2:	b0 91 6f 02 	lds	r27, 0x026F	; 0x80026f <millis+0x3>
     dc6:	40 91 64 02 	lds	r20, 0x0264	; 0x800264 <popTime>
     dca:	50 91 65 02 	lds	r21, 0x0265	; 0x800265 <popTime+0x1>
     dce:	60 91 66 02 	lds	r22, 0x0266	; 0x800266 <popTime+0x2>
     dd2:	70 91 67 02 	lds	r23, 0x0267	; 0x800267 <popTime+0x3>
     dd6:	84 1b       	sub	r24, r20
     dd8:	95 0b       	sbc	r25, r21
     dda:	a6 0b       	sbc	r26, r22
     ddc:	b7 0b       	sbc	r27, r23
     dde:	85 36       	cpi	r24, 0x65	; 101
     de0:	91 05       	cpc	r25, r1
     de2:	a1 05       	cpc	r26, r1
     de4:	b1 05       	cpc	r27, r1
     de6:	60 f0       	brcs	.+24     	; 0xe00 <__vector_4+0x64>
		if(state == SYSTEM_ON){
     de8:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <__data_end>
     dec:	90 91 63 02 	lds	r25, 0x0263	; 0x800263 <__data_end+0x1>
     df0:	01 97       	sbiw	r24, 0x01	; 1
     df2:	31 f4       	brne	.+12     	; 0xe00 <__vector_4+0x64>
			popItem = 1;
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	90 93 7b 02 	sts	0x027B, r25	; 0x80027b <popItem+0x1>
     dfc:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <popItem>
		}
	}
}
     e00:	bf 91       	pop	r27
     e02:	af 91       	pop	r26
     e04:	9f 91       	pop	r25
     e06:	8f 91       	pop	r24
     e08:	7f 91       	pop	r23
     e0a:	6f 91       	pop	r22
     e0c:	5f 91       	pop	r21
     e0e:	4f 91       	pop	r20
     e10:	0f 90       	pop	r0
     e12:	0f be       	out	0x3f, r0	; 63
     e14:	0f 90       	pop	r0
     e16:	1f 90       	pop	r1
     e18:	18 95       	reti

00000e1a <__vector_5>:

//Pause
ISR(INT4_vect){
     e1a:	1f 92       	push	r1
     e1c:	0f 92       	push	r0
     e1e:	0f b6       	in	r0, 0x3f	; 63
     e20:	0f 92       	push	r0
     e22:	11 24       	eor	r1, r1
     e24:	0b b6       	in	r0, 0x3b	; 59
     e26:	0f 92       	push	r0
     e28:	2f 93       	push	r18
     e2a:	3f 93       	push	r19
     e2c:	4f 93       	push	r20
     e2e:	5f 93       	push	r21
     e30:	6f 93       	push	r22
     e32:	7f 93       	push	r23
     e34:	8f 93       	push	r24
     e36:	9f 93       	push	r25
     e38:	af 93       	push	r26
     e3a:	bf 93       	push	r27
     e3c:	ef 93       	push	r30
     e3e:	ff 93       	push	r31
	if((millis - debounce) > 100){
     e40:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <millis>
     e44:	90 91 6d 02 	lds	r25, 0x026D	; 0x80026d <millis+0x1>
     e48:	a0 91 6e 02 	lds	r26, 0x026E	; 0x80026e <millis+0x2>
     e4c:	b0 91 6f 02 	lds	r27, 0x026F	; 0x80026f <millis+0x3>
     e50:	40 91 68 02 	lds	r20, 0x0268	; 0x800268 <debounce>
     e54:	50 91 69 02 	lds	r21, 0x0269	; 0x800269 <debounce+0x1>
     e58:	60 91 6a 02 	lds	r22, 0x026A	; 0x80026a <debounce+0x2>
     e5c:	70 91 6b 02 	lds	r23, 0x026B	; 0x80026b <debounce+0x3>
     e60:	84 1b       	sub	r24, r20
     e62:	95 0b       	sbc	r25, r21
     e64:	a6 0b       	sbc	r26, r22
     e66:	b7 0b       	sbc	r27, r23
     e68:	85 36       	cpi	r24, 0x65	; 101
     e6a:	91 05       	cpc	r25, r1
     e6c:	a1 05       	cpc	r26, r1
     e6e:	b1 05       	cpc	r27, r1
     e70:	40 f1       	brcs	.+80     	; 0xec2 <__vector_5+0xa8>
		mTimer(15);
     e72:	8f e0       	ldi	r24, 0x0F	; 15
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	c5 da       	rcall	.-2678   	; 0x402 <mTimer>
		if(!(PINE & _BV(PINE4))){
     e78:	64 99       	sbic	0x0c, 4	; 12
     e7a:	23 c0       	rjmp	.+70     	; 0xec2 <__vector_5+0xa8>
			if(state == PAUSED){
     e7c:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <__data_end>
     e80:	90 91 63 02 	lds	r25, 0x0263	; 0x800263 <__data_end+0x1>
     e84:	02 97       	sbiw	r24, 0x02	; 2
     e86:	39 f4       	brne	.+14     	; 0xe96 <__vector_5+0x7c>
				state = SYSTEM_ON;
     e88:	81 e0       	ldi	r24, 0x01	; 1
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	90 93 63 02 	sts	0x0263, r25	; 0x800263 <__data_end+0x1>
     e90:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <__data_end>
     e94:	06 c0       	rjmp	.+12     	; 0xea2 <__vector_5+0x88>
			}
			else{
				state = PAUSED;
     e96:	82 e0       	ldi	r24, 0x02	; 2
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	90 93 63 02 	sts	0x0263, r25	; 0x800263 <__data_end+0x1>
     e9e:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <__data_end>
			}
			debounce = millis;
     ea2:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <millis>
     ea6:	90 91 6d 02 	lds	r25, 0x026D	; 0x80026d <millis+0x1>
     eaa:	a0 91 6e 02 	lds	r26, 0x026E	; 0x80026e <millis+0x2>
     eae:	b0 91 6f 02 	lds	r27, 0x026F	; 0x80026f <millis+0x3>
     eb2:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <debounce>
     eb6:	90 93 69 02 	sts	0x0269, r25	; 0x800269 <debounce+0x1>
     eba:	a0 93 6a 02 	sts	0x026A, r26	; 0x80026a <debounce+0x2>
     ebe:	b0 93 6b 02 	sts	0x026B, r27	; 0x80026b <debounce+0x3>
		}
	}
}
     ec2:	ff 91       	pop	r31
     ec4:	ef 91       	pop	r30
     ec6:	bf 91       	pop	r27
     ec8:	af 91       	pop	r26
     eca:	9f 91       	pop	r25
     ecc:	8f 91       	pop	r24
     ece:	7f 91       	pop	r23
     ed0:	6f 91       	pop	r22
     ed2:	5f 91       	pop	r21
     ed4:	4f 91       	pop	r20
     ed6:	3f 91       	pop	r19
     ed8:	2f 91       	pop	r18
     eda:	0f 90       	pop	r0
     edc:	0b be       	out	0x3b, r0	; 59
     ede:	0f 90       	pop	r0
     ee0:	0f be       	out	0x3f, r0	; 63
     ee2:	0f 90       	pop	r0
     ee4:	1f 90       	pop	r1
     ee6:	18 95       	reti

00000ee8 <__vector_6>:

//Ramp Down
ISR(INT5_vect){
     ee8:	1f 92       	push	r1
     eea:	0f 92       	push	r0
     eec:	0f b6       	in	r0, 0x3f	; 63
     eee:	0f 92       	push	r0
     ef0:	11 24       	eor	r1, r1
     ef2:	8f 93       	push	r24
     ef4:	9f 93       	push	r25
	if(state != INIT_SYS){
     ef6:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <__data_end>
     efa:	90 91 63 02 	lds	r25, 0x0263	; 0x800263 <__data_end+0x1>
     efe:	89 2b       	or	r24, r25
     f00:	31 f0       	breq	.+12     	; 0xf0e <__vector_6+0x26>
		state = RAMPDN;
     f02:	83 e0       	ldi	r24, 0x03	; 3
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	90 93 63 02 	sts	0x0263, r25	; 0x800263 <__data_end+0x1>
     f0a:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <__data_end>
	}
}
     f0e:	9f 91       	pop	r25
     f10:	8f 91       	pop	r24
     f12:	0f 90       	pop	r0
     f14:	0f be       	out	0x3f, r0	; 63
     f16:	0f 90       	pop	r0
     f18:	1f 90       	pop	r1
     f1a:	18 95       	reti

00000f1c <__vector_35>:

ISR(TIMER3_OVF_vect){
     f1c:	1f 92       	push	r1
     f1e:	0f 92       	push	r0
     f20:	0f b6       	in	r0, 0x3f	; 63
     f22:	0f 92       	push	r0
     f24:	11 24       	eor	r1, r1
     f26:	8f 93       	push	r24
     f28:	9f 93       	push	r25
     f2a:	af 93       	push	r26
     f2c:	bf 93       	push	r27
	TCNT3 = 57537;
     f2e:	81 ec       	ldi	r24, 0xC1	; 193
     f30:	90 ee       	ldi	r25, 0xE0	; 224
     f32:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
     f36:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
	millis++;
     f3a:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <millis>
     f3e:	90 91 6d 02 	lds	r25, 0x026D	; 0x80026d <millis+0x1>
     f42:	a0 91 6e 02 	lds	r26, 0x026E	; 0x80026e <millis+0x2>
     f46:	b0 91 6f 02 	lds	r27, 0x026F	; 0x80026f <millis+0x3>
     f4a:	01 96       	adiw	r24, 0x01	; 1
     f4c:	a1 1d       	adc	r26, r1
     f4e:	b1 1d       	adc	r27, r1
     f50:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <millis>
     f54:	90 93 6d 02 	sts	0x026D, r25	; 0x80026d <millis+0x1>
     f58:	a0 93 6e 02 	sts	0x026E, r26	; 0x80026e <millis+0x2>
     f5c:	b0 93 6f 02 	sts	0x026F, r27	; 0x80026f <millis+0x3>
	
}
     f60:	bf 91       	pop	r27
     f62:	af 91       	pop	r26
     f64:	9f 91       	pop	r25
     f66:	8f 91       	pop	r24
     f68:	0f 90       	pop	r0
     f6a:	0f be       	out	0x3f, r0	; 63
     f6c:	0f 90       	pop	r0
     f6e:	1f 90       	pop	r1
     f70:	18 95       	reti

00000f72 <__vector_default>:

ISR(BADISR_vect){
     f72:	1f 92       	push	r1
     f74:	0f 92       	push	r0
     f76:	0f b6       	in	r0, 0x3f	; 63
     f78:	0f 92       	push	r0
     f7a:	11 24       	eor	r1, r1
	
}
     f7c:	0f 90       	pop	r0
     f7e:	0f be       	out	0x3f, r0	; 63
     f80:	0f 90       	pop	r0
     f82:	1f 90       	pop	r1
     f84:	18 95       	reti

00000f86 <__vector_29>:

//interrupt will be trigged when ADC is finished conversion
ISR(ADC_vect){
     f86:	1f 92       	push	r1
     f88:	0f 92       	push	r0
     f8a:	0f b6       	in	r0, 0x3f	; 63
     f8c:	0f 92       	push	r0
     f8e:	11 24       	eor	r1, r1
     f90:	2f 93       	push	r18
     f92:	3f 93       	push	r19
     f94:	8f 93       	push	r24
     f96:	9f 93       	push	r25
	ADC_result = ADCL + (ADCH<<8);
     f98:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
     f9c:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	98 2f       	mov	r25, r24
     fa4:	88 27       	eor	r24, r24
     fa6:	82 0f       	add	r24, r18
     fa8:	91 1d       	adc	r25, r1
     faa:	90 93 83 02 	sts	0x0283, r25	; 0x800283 <ADC_result+0x1>
     fae:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <ADC_result>
	if(ADC_result < lowestADCVal){
     fb2:	20 91 82 02 	lds	r18, 0x0282	; 0x800282 <ADC_result>
     fb6:	30 91 83 02 	lds	r19, 0x0283	; 0x800283 <ADC_result+0x1>
     fba:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <lowestADCVal>
     fbe:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <lowestADCVal+0x1>
     fc2:	28 17       	cp	r18, r24
     fc4:	39 07       	cpc	r19, r25
     fc6:	40 f4       	brcc	.+16     	; 0xfd8 <__vector_29+0x52>
		lowestADCVal = ADC_result;
     fc8:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <ADC_result>
     fcc:	90 91 83 02 	lds	r25, 0x0283	; 0x800283 <ADC_result+0x1>
     fd0:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <lowestADCVal+0x1>
     fd4:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <lowestADCVal>
	}
	ADC_result_flag = 1;
     fd8:	81 e0       	ldi	r24, 0x01	; 1
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	90 93 85 02 	sts	0x0285, r25	; 0x800285 <ADC_result_flag+0x1>
     fe0:	80 93 84 02 	sts	0x0284, r24	; 0x800284 <ADC_result_flag>
}
     fe4:	9f 91       	pop	r25
     fe6:	8f 91       	pop	r24
     fe8:	3f 91       	pop	r19
     fea:	2f 91       	pop	r18
     fec:	0f 90       	pop	r0
     fee:	0f be       	out	0x3f, r0	; 63
     ff0:	0f 90       	pop	r0
     ff2:	1f 90       	pop	r1
     ff4:	18 95       	reti

00000ff6 <__fixsfsi>:
     ff6:	04 d0       	rcall	.+8      	; 0x1000 <__fixunssfsi>
     ff8:	68 94       	set
     ffa:	b1 11       	cpse	r27, r1
     ffc:	8d c0       	rjmp	.+282    	; 0x1118 <__fp_szero>
     ffe:	08 95       	ret

00001000 <__fixunssfsi>:
    1000:	70 d0       	rcall	.+224    	; 0x10e2 <__fp_splitA>
    1002:	88 f0       	brcs	.+34     	; 0x1026 <__fixunssfsi+0x26>
    1004:	9f 57       	subi	r25, 0x7F	; 127
    1006:	90 f0       	brcs	.+36     	; 0x102c <__fixunssfsi+0x2c>
    1008:	b9 2f       	mov	r27, r25
    100a:	99 27       	eor	r25, r25
    100c:	b7 51       	subi	r27, 0x17	; 23
    100e:	a0 f0       	brcs	.+40     	; 0x1038 <__fixunssfsi+0x38>
    1010:	d1 f0       	breq	.+52     	; 0x1046 <__fixunssfsi+0x46>
    1012:	66 0f       	add	r22, r22
    1014:	77 1f       	adc	r23, r23
    1016:	88 1f       	adc	r24, r24
    1018:	99 1f       	adc	r25, r25
    101a:	1a f0       	brmi	.+6      	; 0x1022 <__fixunssfsi+0x22>
    101c:	ba 95       	dec	r27
    101e:	c9 f7       	brne	.-14     	; 0x1012 <__fixunssfsi+0x12>
    1020:	12 c0       	rjmp	.+36     	; 0x1046 <__fixunssfsi+0x46>
    1022:	b1 30       	cpi	r27, 0x01	; 1
    1024:	81 f0       	breq	.+32     	; 0x1046 <__fixunssfsi+0x46>
    1026:	77 d0       	rcall	.+238    	; 0x1116 <__fp_zero>
    1028:	b1 e0       	ldi	r27, 0x01	; 1
    102a:	08 95       	ret
    102c:	74 c0       	rjmp	.+232    	; 0x1116 <__fp_zero>
    102e:	67 2f       	mov	r22, r23
    1030:	78 2f       	mov	r23, r24
    1032:	88 27       	eor	r24, r24
    1034:	b8 5f       	subi	r27, 0xF8	; 248
    1036:	39 f0       	breq	.+14     	; 0x1046 <__fixunssfsi+0x46>
    1038:	b9 3f       	cpi	r27, 0xF9	; 249
    103a:	cc f3       	brlt	.-14     	; 0x102e <__fixunssfsi+0x2e>
    103c:	86 95       	lsr	r24
    103e:	77 95       	ror	r23
    1040:	67 95       	ror	r22
    1042:	b3 95       	inc	r27
    1044:	d9 f7       	brne	.-10     	; 0x103c <__fixunssfsi+0x3c>
    1046:	3e f4       	brtc	.+14     	; 0x1056 <__fixunssfsi+0x56>
    1048:	90 95       	com	r25
    104a:	80 95       	com	r24
    104c:	70 95       	com	r23
    104e:	61 95       	neg	r22
    1050:	7f 4f       	sbci	r23, 0xFF	; 255
    1052:	8f 4f       	sbci	r24, 0xFF	; 255
    1054:	9f 4f       	sbci	r25, 0xFF	; 255
    1056:	08 95       	ret

00001058 <__floatunsisf>:
    1058:	e8 94       	clt
    105a:	09 c0       	rjmp	.+18     	; 0x106e <__floatsisf+0x12>

0000105c <__floatsisf>:
    105c:	97 fb       	bst	r25, 7
    105e:	3e f4       	brtc	.+14     	; 0x106e <__floatsisf+0x12>
    1060:	90 95       	com	r25
    1062:	80 95       	com	r24
    1064:	70 95       	com	r23
    1066:	61 95       	neg	r22
    1068:	7f 4f       	sbci	r23, 0xFF	; 255
    106a:	8f 4f       	sbci	r24, 0xFF	; 255
    106c:	9f 4f       	sbci	r25, 0xFF	; 255
    106e:	99 23       	and	r25, r25
    1070:	a9 f0       	breq	.+42     	; 0x109c <__floatsisf+0x40>
    1072:	f9 2f       	mov	r31, r25
    1074:	96 e9       	ldi	r25, 0x96	; 150
    1076:	bb 27       	eor	r27, r27
    1078:	93 95       	inc	r25
    107a:	f6 95       	lsr	r31
    107c:	87 95       	ror	r24
    107e:	77 95       	ror	r23
    1080:	67 95       	ror	r22
    1082:	b7 95       	ror	r27
    1084:	f1 11       	cpse	r31, r1
    1086:	f8 cf       	rjmp	.-16     	; 0x1078 <__floatsisf+0x1c>
    1088:	fa f4       	brpl	.+62     	; 0x10c8 <__floatsisf+0x6c>
    108a:	bb 0f       	add	r27, r27
    108c:	11 f4       	brne	.+4      	; 0x1092 <__floatsisf+0x36>
    108e:	60 ff       	sbrs	r22, 0
    1090:	1b c0       	rjmp	.+54     	; 0x10c8 <__floatsisf+0x6c>
    1092:	6f 5f       	subi	r22, 0xFF	; 255
    1094:	7f 4f       	sbci	r23, 0xFF	; 255
    1096:	8f 4f       	sbci	r24, 0xFF	; 255
    1098:	9f 4f       	sbci	r25, 0xFF	; 255
    109a:	16 c0       	rjmp	.+44     	; 0x10c8 <__floatsisf+0x6c>
    109c:	88 23       	and	r24, r24
    109e:	11 f0       	breq	.+4      	; 0x10a4 <__floatsisf+0x48>
    10a0:	96 e9       	ldi	r25, 0x96	; 150
    10a2:	11 c0       	rjmp	.+34     	; 0x10c6 <__floatsisf+0x6a>
    10a4:	77 23       	and	r23, r23
    10a6:	21 f0       	breq	.+8      	; 0x10b0 <__floatsisf+0x54>
    10a8:	9e e8       	ldi	r25, 0x8E	; 142
    10aa:	87 2f       	mov	r24, r23
    10ac:	76 2f       	mov	r23, r22
    10ae:	05 c0       	rjmp	.+10     	; 0x10ba <__floatsisf+0x5e>
    10b0:	66 23       	and	r22, r22
    10b2:	71 f0       	breq	.+28     	; 0x10d0 <__floatsisf+0x74>
    10b4:	96 e8       	ldi	r25, 0x86	; 134
    10b6:	86 2f       	mov	r24, r22
    10b8:	70 e0       	ldi	r23, 0x00	; 0
    10ba:	60 e0       	ldi	r22, 0x00	; 0
    10bc:	2a f0       	brmi	.+10     	; 0x10c8 <__floatsisf+0x6c>
    10be:	9a 95       	dec	r25
    10c0:	66 0f       	add	r22, r22
    10c2:	77 1f       	adc	r23, r23
    10c4:	88 1f       	adc	r24, r24
    10c6:	da f7       	brpl	.-10     	; 0x10be <__floatsisf+0x62>
    10c8:	88 0f       	add	r24, r24
    10ca:	96 95       	lsr	r25
    10cc:	87 95       	ror	r24
    10ce:	97 f9       	bld	r25, 7
    10d0:	08 95       	ret

000010d2 <__fp_split3>:
    10d2:	57 fd       	sbrc	r21, 7
    10d4:	90 58       	subi	r25, 0x80	; 128
    10d6:	44 0f       	add	r20, r20
    10d8:	55 1f       	adc	r21, r21
    10da:	59 f0       	breq	.+22     	; 0x10f2 <__fp_splitA+0x10>
    10dc:	5f 3f       	cpi	r21, 0xFF	; 255
    10de:	71 f0       	breq	.+28     	; 0x10fc <__fp_splitA+0x1a>
    10e0:	47 95       	ror	r20

000010e2 <__fp_splitA>:
    10e2:	88 0f       	add	r24, r24
    10e4:	97 fb       	bst	r25, 7
    10e6:	99 1f       	adc	r25, r25
    10e8:	61 f0       	breq	.+24     	; 0x1102 <__fp_splitA+0x20>
    10ea:	9f 3f       	cpi	r25, 0xFF	; 255
    10ec:	79 f0       	breq	.+30     	; 0x110c <__fp_splitA+0x2a>
    10ee:	87 95       	ror	r24
    10f0:	08 95       	ret
    10f2:	12 16       	cp	r1, r18
    10f4:	13 06       	cpc	r1, r19
    10f6:	14 06       	cpc	r1, r20
    10f8:	55 1f       	adc	r21, r21
    10fa:	f2 cf       	rjmp	.-28     	; 0x10e0 <__fp_split3+0xe>
    10fc:	46 95       	lsr	r20
    10fe:	f1 df       	rcall	.-30     	; 0x10e2 <__fp_splitA>
    1100:	08 c0       	rjmp	.+16     	; 0x1112 <__fp_splitA+0x30>
    1102:	16 16       	cp	r1, r22
    1104:	17 06       	cpc	r1, r23
    1106:	18 06       	cpc	r1, r24
    1108:	99 1f       	adc	r25, r25
    110a:	f1 cf       	rjmp	.-30     	; 0x10ee <__fp_splitA+0xc>
    110c:	86 95       	lsr	r24
    110e:	71 05       	cpc	r23, r1
    1110:	61 05       	cpc	r22, r1
    1112:	08 94       	sec
    1114:	08 95       	ret

00001116 <__fp_zero>:
    1116:	e8 94       	clt

00001118 <__fp_szero>:
    1118:	bb 27       	eor	r27, r27
    111a:	66 27       	eor	r22, r22
    111c:	77 27       	eor	r23, r23
    111e:	cb 01       	movw	r24, r22
    1120:	97 f9       	bld	r25, 7
    1122:	08 95       	ret

00001124 <__mulsf3>:
    1124:	0b d0       	rcall	.+22     	; 0x113c <__mulsf3x>
    1126:	78 c0       	rjmp	.+240    	; 0x1218 <__fp_round>
    1128:	69 d0       	rcall	.+210    	; 0x11fc <__fp_pscA>
    112a:	28 f0       	brcs	.+10     	; 0x1136 <__mulsf3+0x12>
    112c:	6e d0       	rcall	.+220    	; 0x120a <__fp_pscB>
    112e:	18 f0       	brcs	.+6      	; 0x1136 <__mulsf3+0x12>
    1130:	95 23       	and	r25, r21
    1132:	09 f0       	breq	.+2      	; 0x1136 <__mulsf3+0x12>
    1134:	5a c0       	rjmp	.+180    	; 0x11ea <__fp_inf>
    1136:	5f c0       	rjmp	.+190    	; 0x11f6 <__fp_nan>
    1138:	11 24       	eor	r1, r1
    113a:	ee cf       	rjmp	.-36     	; 0x1118 <__fp_szero>

0000113c <__mulsf3x>:
    113c:	ca df       	rcall	.-108    	; 0x10d2 <__fp_split3>
    113e:	a0 f3       	brcs	.-24     	; 0x1128 <__mulsf3+0x4>

00001140 <__mulsf3_pse>:
    1140:	95 9f       	mul	r25, r21
    1142:	d1 f3       	breq	.-12     	; 0x1138 <__mulsf3+0x14>
    1144:	95 0f       	add	r25, r21
    1146:	50 e0       	ldi	r21, 0x00	; 0
    1148:	55 1f       	adc	r21, r21
    114a:	62 9f       	mul	r22, r18
    114c:	f0 01       	movw	r30, r0
    114e:	72 9f       	mul	r23, r18
    1150:	bb 27       	eor	r27, r27
    1152:	f0 0d       	add	r31, r0
    1154:	b1 1d       	adc	r27, r1
    1156:	63 9f       	mul	r22, r19
    1158:	aa 27       	eor	r26, r26
    115a:	f0 0d       	add	r31, r0
    115c:	b1 1d       	adc	r27, r1
    115e:	aa 1f       	adc	r26, r26
    1160:	64 9f       	mul	r22, r20
    1162:	66 27       	eor	r22, r22
    1164:	b0 0d       	add	r27, r0
    1166:	a1 1d       	adc	r26, r1
    1168:	66 1f       	adc	r22, r22
    116a:	82 9f       	mul	r24, r18
    116c:	22 27       	eor	r18, r18
    116e:	b0 0d       	add	r27, r0
    1170:	a1 1d       	adc	r26, r1
    1172:	62 1f       	adc	r22, r18
    1174:	73 9f       	mul	r23, r19
    1176:	b0 0d       	add	r27, r0
    1178:	a1 1d       	adc	r26, r1
    117a:	62 1f       	adc	r22, r18
    117c:	83 9f       	mul	r24, r19
    117e:	a0 0d       	add	r26, r0
    1180:	61 1d       	adc	r22, r1
    1182:	22 1f       	adc	r18, r18
    1184:	74 9f       	mul	r23, r20
    1186:	33 27       	eor	r19, r19
    1188:	a0 0d       	add	r26, r0
    118a:	61 1d       	adc	r22, r1
    118c:	23 1f       	adc	r18, r19
    118e:	84 9f       	mul	r24, r20
    1190:	60 0d       	add	r22, r0
    1192:	21 1d       	adc	r18, r1
    1194:	82 2f       	mov	r24, r18
    1196:	76 2f       	mov	r23, r22
    1198:	6a 2f       	mov	r22, r26
    119a:	11 24       	eor	r1, r1
    119c:	9f 57       	subi	r25, 0x7F	; 127
    119e:	50 40       	sbci	r21, 0x00	; 0
    11a0:	8a f0       	brmi	.+34     	; 0x11c4 <__mulsf3_pse+0x84>
    11a2:	e1 f0       	breq	.+56     	; 0x11dc <__mulsf3_pse+0x9c>
    11a4:	88 23       	and	r24, r24
    11a6:	4a f0       	brmi	.+18     	; 0x11ba <__mulsf3_pse+0x7a>
    11a8:	ee 0f       	add	r30, r30
    11aa:	ff 1f       	adc	r31, r31
    11ac:	bb 1f       	adc	r27, r27
    11ae:	66 1f       	adc	r22, r22
    11b0:	77 1f       	adc	r23, r23
    11b2:	88 1f       	adc	r24, r24
    11b4:	91 50       	subi	r25, 0x01	; 1
    11b6:	50 40       	sbci	r21, 0x00	; 0
    11b8:	a9 f7       	brne	.-22     	; 0x11a4 <__mulsf3_pse+0x64>
    11ba:	9e 3f       	cpi	r25, 0xFE	; 254
    11bc:	51 05       	cpc	r21, r1
    11be:	70 f0       	brcs	.+28     	; 0x11dc <__mulsf3_pse+0x9c>
    11c0:	14 c0       	rjmp	.+40     	; 0x11ea <__fp_inf>
    11c2:	aa cf       	rjmp	.-172    	; 0x1118 <__fp_szero>
    11c4:	5f 3f       	cpi	r21, 0xFF	; 255
    11c6:	ec f3       	brlt	.-6      	; 0x11c2 <__mulsf3_pse+0x82>
    11c8:	98 3e       	cpi	r25, 0xE8	; 232
    11ca:	dc f3       	brlt	.-10     	; 0x11c2 <__mulsf3_pse+0x82>
    11cc:	86 95       	lsr	r24
    11ce:	77 95       	ror	r23
    11d0:	67 95       	ror	r22
    11d2:	b7 95       	ror	r27
    11d4:	f7 95       	ror	r31
    11d6:	e7 95       	ror	r30
    11d8:	9f 5f       	subi	r25, 0xFF	; 255
    11da:	c1 f7       	brne	.-16     	; 0x11cc <__mulsf3_pse+0x8c>
    11dc:	fe 2b       	or	r31, r30
    11de:	88 0f       	add	r24, r24
    11e0:	91 1d       	adc	r25, r1
    11e2:	96 95       	lsr	r25
    11e4:	87 95       	ror	r24
    11e6:	97 f9       	bld	r25, 7
    11e8:	08 95       	ret

000011ea <__fp_inf>:
    11ea:	97 f9       	bld	r25, 7
    11ec:	9f 67       	ori	r25, 0x7F	; 127
    11ee:	80 e8       	ldi	r24, 0x80	; 128
    11f0:	70 e0       	ldi	r23, 0x00	; 0
    11f2:	60 e0       	ldi	r22, 0x00	; 0
    11f4:	08 95       	ret

000011f6 <__fp_nan>:
    11f6:	9f ef       	ldi	r25, 0xFF	; 255
    11f8:	80 ec       	ldi	r24, 0xC0	; 192
    11fa:	08 95       	ret

000011fc <__fp_pscA>:
    11fc:	00 24       	eor	r0, r0
    11fe:	0a 94       	dec	r0
    1200:	16 16       	cp	r1, r22
    1202:	17 06       	cpc	r1, r23
    1204:	18 06       	cpc	r1, r24
    1206:	09 06       	cpc	r0, r25
    1208:	08 95       	ret

0000120a <__fp_pscB>:
    120a:	00 24       	eor	r0, r0
    120c:	0a 94       	dec	r0
    120e:	12 16       	cp	r1, r18
    1210:	13 06       	cpc	r1, r19
    1212:	14 06       	cpc	r1, r20
    1214:	05 06       	cpc	r0, r21
    1216:	08 95       	ret

00001218 <__fp_round>:
    1218:	09 2e       	mov	r0, r25
    121a:	03 94       	inc	r0
    121c:	00 0c       	add	r0, r0
    121e:	11 f4       	brne	.+4      	; 0x1224 <__fp_round+0xc>
    1220:	88 23       	and	r24, r24
    1222:	52 f0       	brmi	.+20     	; 0x1238 <__fp_round+0x20>
    1224:	bb 0f       	add	r27, r27
    1226:	40 f4       	brcc	.+16     	; 0x1238 <__fp_round+0x20>
    1228:	bf 2b       	or	r27, r31
    122a:	11 f4       	brne	.+4      	; 0x1230 <__fp_round+0x18>
    122c:	60 ff       	sbrs	r22, 0
    122e:	04 c0       	rjmp	.+8      	; 0x1238 <__fp_round+0x20>
    1230:	6f 5f       	subi	r22, 0xFF	; 255
    1232:	7f 4f       	sbci	r23, 0xFF	; 255
    1234:	8f 4f       	sbci	r24, 0xFF	; 255
    1236:	9f 4f       	sbci	r25, 0xFF	; 255
    1238:	08 95       	ret

0000123a <__divmodhi4>:
    123a:	97 fb       	bst	r25, 7
    123c:	07 2e       	mov	r0, r23
    123e:	16 f4       	brtc	.+4      	; 0x1244 <__divmodhi4+0xa>
    1240:	00 94       	com	r0
    1242:	06 d0       	rcall	.+12     	; 0x1250 <__divmodhi4_neg1>
    1244:	77 fd       	sbrc	r23, 7
    1246:	08 d0       	rcall	.+16     	; 0x1258 <__divmodhi4_neg2>
    1248:	0b d0       	rcall	.+22     	; 0x1260 <__udivmodhi4>
    124a:	07 fc       	sbrc	r0, 7
    124c:	05 d0       	rcall	.+10     	; 0x1258 <__divmodhi4_neg2>
    124e:	3e f4       	brtc	.+14     	; 0x125e <__divmodhi4_exit>

00001250 <__divmodhi4_neg1>:
    1250:	90 95       	com	r25
    1252:	81 95       	neg	r24
    1254:	9f 4f       	sbci	r25, 0xFF	; 255
    1256:	08 95       	ret

00001258 <__divmodhi4_neg2>:
    1258:	70 95       	com	r23
    125a:	61 95       	neg	r22
    125c:	7f 4f       	sbci	r23, 0xFF	; 255

0000125e <__divmodhi4_exit>:
    125e:	08 95       	ret

00001260 <__udivmodhi4>:
    1260:	aa 1b       	sub	r26, r26
    1262:	bb 1b       	sub	r27, r27
    1264:	51 e1       	ldi	r21, 0x11	; 17
    1266:	07 c0       	rjmp	.+14     	; 0x1276 <__udivmodhi4_ep>

00001268 <__udivmodhi4_loop>:
    1268:	aa 1f       	adc	r26, r26
    126a:	bb 1f       	adc	r27, r27
    126c:	a6 17       	cp	r26, r22
    126e:	b7 07       	cpc	r27, r23
    1270:	10 f0       	brcs	.+4      	; 0x1276 <__udivmodhi4_ep>
    1272:	a6 1b       	sub	r26, r22
    1274:	b7 0b       	sbc	r27, r23

00001276 <__udivmodhi4_ep>:
    1276:	88 1f       	adc	r24, r24
    1278:	99 1f       	adc	r25, r25
    127a:	5a 95       	dec	r21
    127c:	a9 f7       	brne	.-22     	; 0x1268 <__udivmodhi4_loop>
    127e:	80 95       	com	r24
    1280:	90 95       	com	r25
    1282:	bc 01       	movw	r22, r24
    1284:	cd 01       	movw	r24, r26
    1286:	08 95       	ret

00001288 <malloc>:
    1288:	0f 93       	push	r16
    128a:	1f 93       	push	r17
    128c:	cf 93       	push	r28
    128e:	df 93       	push	r29
    1290:	82 30       	cpi	r24, 0x02	; 2
    1292:	91 05       	cpc	r25, r1
    1294:	10 f4       	brcc	.+4      	; 0x129a <malloc+0x12>
    1296:	82 e0       	ldi	r24, 0x02	; 2
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	e0 91 88 02 	lds	r30, 0x0288	; 0x800288 <__flp>
    129e:	f0 91 89 02 	lds	r31, 0x0289	; 0x800289 <__flp+0x1>
    12a2:	20 e0       	ldi	r18, 0x00	; 0
    12a4:	30 e0       	ldi	r19, 0x00	; 0
    12a6:	a0 e0       	ldi	r26, 0x00	; 0
    12a8:	b0 e0       	ldi	r27, 0x00	; 0
    12aa:	30 97       	sbiw	r30, 0x00	; 0
    12ac:	19 f1       	breq	.+70     	; 0x12f4 <malloc+0x6c>
    12ae:	40 81       	ld	r20, Z
    12b0:	51 81       	ldd	r21, Z+1	; 0x01
    12b2:	02 81       	ldd	r16, Z+2	; 0x02
    12b4:	13 81       	ldd	r17, Z+3	; 0x03
    12b6:	48 17       	cp	r20, r24
    12b8:	59 07       	cpc	r21, r25
    12ba:	c8 f0       	brcs	.+50     	; 0x12ee <malloc+0x66>
    12bc:	84 17       	cp	r24, r20
    12be:	95 07       	cpc	r25, r21
    12c0:	69 f4       	brne	.+26     	; 0x12dc <malloc+0x54>
    12c2:	10 97       	sbiw	r26, 0x00	; 0
    12c4:	31 f0       	breq	.+12     	; 0x12d2 <malloc+0x4a>
    12c6:	12 96       	adiw	r26, 0x02	; 2
    12c8:	0c 93       	st	X, r16
    12ca:	12 97       	sbiw	r26, 0x02	; 2
    12cc:	13 96       	adiw	r26, 0x03	; 3
    12ce:	1c 93       	st	X, r17
    12d0:	27 c0       	rjmp	.+78     	; 0x1320 <malloc+0x98>
    12d2:	00 93 88 02 	sts	0x0288, r16	; 0x800288 <__flp>
    12d6:	10 93 89 02 	sts	0x0289, r17	; 0x800289 <__flp+0x1>
    12da:	22 c0       	rjmp	.+68     	; 0x1320 <malloc+0x98>
    12dc:	21 15       	cp	r18, r1
    12de:	31 05       	cpc	r19, r1
    12e0:	19 f0       	breq	.+6      	; 0x12e8 <malloc+0x60>
    12e2:	42 17       	cp	r20, r18
    12e4:	53 07       	cpc	r21, r19
    12e6:	18 f4       	brcc	.+6      	; 0x12ee <malloc+0x66>
    12e8:	9a 01       	movw	r18, r20
    12ea:	bd 01       	movw	r22, r26
    12ec:	ef 01       	movw	r28, r30
    12ee:	df 01       	movw	r26, r30
    12f0:	f8 01       	movw	r30, r16
    12f2:	db cf       	rjmp	.-74     	; 0x12aa <malloc+0x22>
    12f4:	21 15       	cp	r18, r1
    12f6:	31 05       	cpc	r19, r1
    12f8:	f9 f0       	breq	.+62     	; 0x1338 <malloc+0xb0>
    12fa:	28 1b       	sub	r18, r24
    12fc:	39 0b       	sbc	r19, r25
    12fe:	24 30       	cpi	r18, 0x04	; 4
    1300:	31 05       	cpc	r19, r1
    1302:	80 f4       	brcc	.+32     	; 0x1324 <malloc+0x9c>
    1304:	8a 81       	ldd	r24, Y+2	; 0x02
    1306:	9b 81       	ldd	r25, Y+3	; 0x03
    1308:	61 15       	cp	r22, r1
    130a:	71 05       	cpc	r23, r1
    130c:	21 f0       	breq	.+8      	; 0x1316 <malloc+0x8e>
    130e:	fb 01       	movw	r30, r22
    1310:	93 83       	std	Z+3, r25	; 0x03
    1312:	82 83       	std	Z+2, r24	; 0x02
    1314:	04 c0       	rjmp	.+8      	; 0x131e <malloc+0x96>
    1316:	90 93 89 02 	sts	0x0289, r25	; 0x800289 <__flp+0x1>
    131a:	80 93 88 02 	sts	0x0288, r24	; 0x800288 <__flp>
    131e:	fe 01       	movw	r30, r28
    1320:	32 96       	adiw	r30, 0x02	; 2
    1322:	44 c0       	rjmp	.+136    	; 0x13ac <malloc+0x124>
    1324:	fe 01       	movw	r30, r28
    1326:	e2 0f       	add	r30, r18
    1328:	f3 1f       	adc	r31, r19
    132a:	81 93       	st	Z+, r24
    132c:	91 93       	st	Z+, r25
    132e:	22 50       	subi	r18, 0x02	; 2
    1330:	31 09       	sbc	r19, r1
    1332:	39 83       	std	Y+1, r19	; 0x01
    1334:	28 83       	st	Y, r18
    1336:	3a c0       	rjmp	.+116    	; 0x13ac <malloc+0x124>
    1338:	20 91 86 02 	lds	r18, 0x0286	; 0x800286 <__brkval>
    133c:	30 91 87 02 	lds	r19, 0x0287	; 0x800287 <__brkval+0x1>
    1340:	23 2b       	or	r18, r19
    1342:	41 f4       	brne	.+16     	; 0x1354 <malloc+0xcc>
    1344:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    1348:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    134c:	30 93 87 02 	sts	0x0287, r19	; 0x800287 <__brkval+0x1>
    1350:	20 93 86 02 	sts	0x0286, r18	; 0x800286 <__brkval>
    1354:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    1358:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    135c:	21 15       	cp	r18, r1
    135e:	31 05       	cpc	r19, r1
    1360:	41 f4       	brne	.+16     	; 0x1372 <malloc+0xea>
    1362:	2d b7       	in	r18, 0x3d	; 61
    1364:	3e b7       	in	r19, 0x3e	; 62
    1366:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    136a:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    136e:	24 1b       	sub	r18, r20
    1370:	35 0b       	sbc	r19, r21
    1372:	e0 91 86 02 	lds	r30, 0x0286	; 0x800286 <__brkval>
    1376:	f0 91 87 02 	lds	r31, 0x0287	; 0x800287 <__brkval+0x1>
    137a:	e2 17       	cp	r30, r18
    137c:	f3 07       	cpc	r31, r19
    137e:	a0 f4       	brcc	.+40     	; 0x13a8 <malloc+0x120>
    1380:	2e 1b       	sub	r18, r30
    1382:	3f 0b       	sbc	r19, r31
    1384:	28 17       	cp	r18, r24
    1386:	39 07       	cpc	r19, r25
    1388:	78 f0       	brcs	.+30     	; 0x13a8 <malloc+0x120>
    138a:	ac 01       	movw	r20, r24
    138c:	4e 5f       	subi	r20, 0xFE	; 254
    138e:	5f 4f       	sbci	r21, 0xFF	; 255
    1390:	24 17       	cp	r18, r20
    1392:	35 07       	cpc	r19, r21
    1394:	48 f0       	brcs	.+18     	; 0x13a8 <malloc+0x120>
    1396:	4e 0f       	add	r20, r30
    1398:	5f 1f       	adc	r21, r31
    139a:	50 93 87 02 	sts	0x0287, r21	; 0x800287 <__brkval+0x1>
    139e:	40 93 86 02 	sts	0x0286, r20	; 0x800286 <__brkval>
    13a2:	81 93       	st	Z+, r24
    13a4:	91 93       	st	Z+, r25
    13a6:	02 c0       	rjmp	.+4      	; 0x13ac <malloc+0x124>
    13a8:	e0 e0       	ldi	r30, 0x00	; 0
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	cf 01       	movw	r24, r30
    13ae:	df 91       	pop	r29
    13b0:	cf 91       	pop	r28
    13b2:	1f 91       	pop	r17
    13b4:	0f 91       	pop	r16
    13b6:	08 95       	ret

000013b8 <free>:
    13b8:	cf 93       	push	r28
    13ba:	df 93       	push	r29
    13bc:	00 97       	sbiw	r24, 0x00	; 0
    13be:	09 f4       	brne	.+2      	; 0x13c2 <free+0xa>
    13c0:	81 c0       	rjmp	.+258    	; 0x14c4 <free+0x10c>
    13c2:	fc 01       	movw	r30, r24
    13c4:	32 97       	sbiw	r30, 0x02	; 2
    13c6:	13 82       	std	Z+3, r1	; 0x03
    13c8:	12 82       	std	Z+2, r1	; 0x02
    13ca:	a0 91 88 02 	lds	r26, 0x0288	; 0x800288 <__flp>
    13ce:	b0 91 89 02 	lds	r27, 0x0289	; 0x800289 <__flp+0x1>
    13d2:	10 97       	sbiw	r26, 0x00	; 0
    13d4:	81 f4       	brne	.+32     	; 0x13f6 <free+0x3e>
    13d6:	20 81       	ld	r18, Z
    13d8:	31 81       	ldd	r19, Z+1	; 0x01
    13da:	82 0f       	add	r24, r18
    13dc:	93 1f       	adc	r25, r19
    13de:	20 91 86 02 	lds	r18, 0x0286	; 0x800286 <__brkval>
    13e2:	30 91 87 02 	lds	r19, 0x0287	; 0x800287 <__brkval+0x1>
    13e6:	28 17       	cp	r18, r24
    13e8:	39 07       	cpc	r19, r25
    13ea:	51 f5       	brne	.+84     	; 0x1440 <free+0x88>
    13ec:	f0 93 87 02 	sts	0x0287, r31	; 0x800287 <__brkval+0x1>
    13f0:	e0 93 86 02 	sts	0x0286, r30	; 0x800286 <__brkval>
    13f4:	67 c0       	rjmp	.+206    	; 0x14c4 <free+0x10c>
    13f6:	ed 01       	movw	r28, r26
    13f8:	20 e0       	ldi	r18, 0x00	; 0
    13fa:	30 e0       	ldi	r19, 0x00	; 0
    13fc:	ce 17       	cp	r28, r30
    13fe:	df 07       	cpc	r29, r31
    1400:	40 f4       	brcc	.+16     	; 0x1412 <free+0x5a>
    1402:	4a 81       	ldd	r20, Y+2	; 0x02
    1404:	5b 81       	ldd	r21, Y+3	; 0x03
    1406:	9e 01       	movw	r18, r28
    1408:	41 15       	cp	r20, r1
    140a:	51 05       	cpc	r21, r1
    140c:	f1 f0       	breq	.+60     	; 0x144a <free+0x92>
    140e:	ea 01       	movw	r28, r20
    1410:	f5 cf       	rjmp	.-22     	; 0x13fc <free+0x44>
    1412:	d3 83       	std	Z+3, r29	; 0x03
    1414:	c2 83       	std	Z+2, r28	; 0x02
    1416:	40 81       	ld	r20, Z
    1418:	51 81       	ldd	r21, Z+1	; 0x01
    141a:	84 0f       	add	r24, r20
    141c:	95 1f       	adc	r25, r21
    141e:	c8 17       	cp	r28, r24
    1420:	d9 07       	cpc	r29, r25
    1422:	59 f4       	brne	.+22     	; 0x143a <free+0x82>
    1424:	88 81       	ld	r24, Y
    1426:	99 81       	ldd	r25, Y+1	; 0x01
    1428:	84 0f       	add	r24, r20
    142a:	95 1f       	adc	r25, r21
    142c:	02 96       	adiw	r24, 0x02	; 2
    142e:	91 83       	std	Z+1, r25	; 0x01
    1430:	80 83       	st	Z, r24
    1432:	8a 81       	ldd	r24, Y+2	; 0x02
    1434:	9b 81       	ldd	r25, Y+3	; 0x03
    1436:	93 83       	std	Z+3, r25	; 0x03
    1438:	82 83       	std	Z+2, r24	; 0x02
    143a:	21 15       	cp	r18, r1
    143c:	31 05       	cpc	r19, r1
    143e:	29 f4       	brne	.+10     	; 0x144a <free+0x92>
    1440:	f0 93 89 02 	sts	0x0289, r31	; 0x800289 <__flp+0x1>
    1444:	e0 93 88 02 	sts	0x0288, r30	; 0x800288 <__flp>
    1448:	3d c0       	rjmp	.+122    	; 0x14c4 <free+0x10c>
    144a:	e9 01       	movw	r28, r18
    144c:	fb 83       	std	Y+3, r31	; 0x03
    144e:	ea 83       	std	Y+2, r30	; 0x02
    1450:	49 91       	ld	r20, Y+
    1452:	59 91       	ld	r21, Y+
    1454:	c4 0f       	add	r28, r20
    1456:	d5 1f       	adc	r29, r21
    1458:	ec 17       	cp	r30, r28
    145a:	fd 07       	cpc	r31, r29
    145c:	61 f4       	brne	.+24     	; 0x1476 <free+0xbe>
    145e:	80 81       	ld	r24, Z
    1460:	91 81       	ldd	r25, Z+1	; 0x01
    1462:	84 0f       	add	r24, r20
    1464:	95 1f       	adc	r25, r21
    1466:	02 96       	adiw	r24, 0x02	; 2
    1468:	e9 01       	movw	r28, r18
    146a:	99 83       	std	Y+1, r25	; 0x01
    146c:	88 83       	st	Y, r24
    146e:	82 81       	ldd	r24, Z+2	; 0x02
    1470:	93 81       	ldd	r25, Z+3	; 0x03
    1472:	9b 83       	std	Y+3, r25	; 0x03
    1474:	8a 83       	std	Y+2, r24	; 0x02
    1476:	e0 e0       	ldi	r30, 0x00	; 0
    1478:	f0 e0       	ldi	r31, 0x00	; 0
    147a:	12 96       	adiw	r26, 0x02	; 2
    147c:	8d 91       	ld	r24, X+
    147e:	9c 91       	ld	r25, X
    1480:	13 97       	sbiw	r26, 0x03	; 3
    1482:	00 97       	sbiw	r24, 0x00	; 0
    1484:	19 f0       	breq	.+6      	; 0x148c <free+0xd4>
    1486:	fd 01       	movw	r30, r26
    1488:	dc 01       	movw	r26, r24
    148a:	f7 cf       	rjmp	.-18     	; 0x147a <free+0xc2>
    148c:	8d 91       	ld	r24, X+
    148e:	9c 91       	ld	r25, X
    1490:	11 97       	sbiw	r26, 0x01	; 1
    1492:	9d 01       	movw	r18, r26
    1494:	2e 5f       	subi	r18, 0xFE	; 254
    1496:	3f 4f       	sbci	r19, 0xFF	; 255
    1498:	82 0f       	add	r24, r18
    149a:	93 1f       	adc	r25, r19
    149c:	20 91 86 02 	lds	r18, 0x0286	; 0x800286 <__brkval>
    14a0:	30 91 87 02 	lds	r19, 0x0287	; 0x800287 <__brkval+0x1>
    14a4:	28 17       	cp	r18, r24
    14a6:	39 07       	cpc	r19, r25
    14a8:	69 f4       	brne	.+26     	; 0x14c4 <free+0x10c>
    14aa:	30 97       	sbiw	r30, 0x00	; 0
    14ac:	29 f4       	brne	.+10     	; 0x14b8 <free+0x100>
    14ae:	10 92 89 02 	sts	0x0289, r1	; 0x800289 <__flp+0x1>
    14b2:	10 92 88 02 	sts	0x0288, r1	; 0x800288 <__flp>
    14b6:	02 c0       	rjmp	.+4      	; 0x14bc <free+0x104>
    14b8:	13 82       	std	Z+3, r1	; 0x03
    14ba:	12 82       	std	Z+2, r1	; 0x02
    14bc:	b0 93 87 02 	sts	0x0287, r27	; 0x800287 <__brkval+0x1>
    14c0:	a0 93 86 02 	sts	0x0286, r26	; 0x800286 <__brkval>
    14c4:	df 91       	pop	r29
    14c6:	cf 91       	pop	r28
    14c8:	08 95       	ret

000014ca <_exit>:
    14ca:	f8 94       	cli

000014cc <__stop_program>:
    14cc:	ff cf       	rjmp	.-2      	; 0x14cc <__stop_program>
